<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="html_additional_scripttags" />
        <apex:define name="text_page_icon">ðŸ”¥</apex:define> 
        <apex:define name="text_page_title">{!$Label.OrgCheck_Apex_Title_CL}</apex:define>
        <apex:define name="text_page_subtitle">{!$Label.OrgCheck_Apex_Subtitle_CL}</apex:define>
        <apex:define name="text_page_description">
            <apex:outputText escape="false" value="{!$Label.OrgCheck_Apex_Description1_CL}" />
            <apex:outputText escape="false" value="{!$Label.OrgCheck_Apex_Description2_CL}" />
            <apex:outputText escape="false" value="{!$Label.OrgCheck_Apex_Description3_CL}" />
            <apex:outputText escape="false" value="{!$Label.OrgCheck_Apex_Description4_CL}" />
        </apex:define>
        <apex:define name="html_actions">
            <div class="slds-page-header__control">
                <a>
                    <button id="compile-uncompiled-classes-button" class="slds-button slds-button_icon slds-button_icon-border-filled" title="{!$Label.OrgCheck_CompileAll_CL}">
                        <svg class="slds-button__icon" aria-hidden="true">
                            <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#apex_plugin')}"></use>
                        </svg>
                        <span class="slds-assistive-text">{!$Label.OrgCheck_CompileAll_CL}</span>
                    </button>
                </a>
            </div>
            <div class="slds-page-header__control">
                <a href="/ui/setup/apex/ApexTestQueuePage" target="_blank" rel="external noopener noreferrer">
                    <button id="run-all-tests" class="slds-button slds-button_icon slds-button_icon-border-filled" title="{!$Label.OrgCheck_UnitTests_CL}">
                        <svg class="slds-button__icon" aria-hidden="true">
                            <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#like')}"></use>
                        </svg>
                        <span class="slds-assistive-text">{!$Label.OrgCheck_UnitTests_CL}</span>
                    </button>
                </a>
            </div>
        </apex:define>
        <apex:define name="html_content_core">
            <div class="slds-tabs_default">
                <ul class="slds-tabs_default__nav" role="tablist">
                    <li class="slds-tabs_default__item slds-is-active" title="{!$Label.OrgCheck_Classes_CL}" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="false" aria-controls="tab-default-classes" id="tab-default-classes__item">{!$Label.OrgCheck_Classes_CL}</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Recompilation needed" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="true" aria-controls="tab-default-recompilations" id="tab-default-recompilations__item">Recompilation needed</a>
                    </li>
                    <li class="slds-tabs_default__item" title="{!$Label.OrgCheck_Triggers_CL}" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-2" aria-selected="false" aria-controls="tab-default-triggers" id="tab-default-triggers__item">{!$Label.OrgCheck_Triggers_CL}</a>
                    </li>
                    <li class="slds-tabs_default__item" title="{!$Label.OrgCheck_TriggersCount_CL}" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-3" aria-selected="false" aria-controls="tab-default-objtriggercounts" id="tab-default-objtriggercounts__item">{!$Label.OrgCheck_TriggersCount_CL}</a>
                    </li>
                    <li class="slds-tabs_default__item" title="{!$Label.OrgCheck_UnitTests_CL}" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-4" aria-selected="false" aria-controls="tab-default-apextests" id="tab-default-apextests__item">{!$Label.OrgCheck_UnitTests_CL}</a>
                    </li>
                </ul>
                <div id="tab-default-classes" class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-default-classes__item">
                    <div id="datatable-classes" />
                </div>
                <div id="tab-default-recompilations" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-recompilations__item">
                    <div id="datatable-recompilations" />
                </div>
                <div id="tab-default-triggers" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-triggers__item">
                    <div id="datatable-triggers" />
                </div>
                <div id="tab-default-objtriggercounts" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-objtriggercounts__item">
                    <div id="datatable-objtriggercounts" />
                </div>                
                <div id="tab-default-apextests" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-apextests__item">
                    <div id="datatable-apextests" />
                </div>
            </div>
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {

                    // Initialize TABS bindings
                    helper.html.tabs.initialize('slds-tabs_default__item', 'slds-tabs_default__content', 'slds-button');

                    // RUN CONTROLLER
                    controller.run({
                        datasets: [ 'apexClasses', 'apexTriggers', 'objects' ],
                        dependencies: true,
                        onRecords: function(map) { 

                            let cntClsToCompile = 0;
                            let cntClsNoCoverage = 0;
                            let cntClsLowCoverage = 0;
                            const classesToCompile = [];

                            // Render the Apex Compilations data in a table
                            helper.html.datatable.create({
                                element: 'datatable-recompilations',
                                appendCountInElement: 'tab-default-recompilations__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', formula: (r) => { return helper.html.render.link('/'+r.id, r.name); }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ApiVersion_CL)}', type: 'numeric', property: 'apiVersion',
                                        scoreFormula: (r) => { 
                                            if (r.isApiVersionOld === true) return 1; 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Package_CL)}', property: 'namespace' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Status_CL)}', 
                                        formula: (r) => {
                                            cntClsToCompile++;
                                            classesToCompile.push(r.id);
                                            return 'Recompile!';
                                        },
                                        scoreFormula: (r) => { return 1; }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_CreatedDate_CL)}', type: 'datetime', property: 'createdDate' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ModifiedDate_CL)}', type: 'datetime', property: 'lastModifiedDate' }                                    
                                ],
                                data: map.apexClasses,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                filtering: { formula: (r) => { return r.needsRecompilation === true; }},
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true,
                                stickyHeaders: true
                            });

                            // Render the Apex Classes data in a table
                            helper.html.datatable.create({
                                element: 'datatable-classes',
                                appendCountInElement: 'tab-default-classes__item',
                                preprocessing: (r) => {
                                    return {
                                        count_whereIsItUsed: helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]),
                                        count_whatIsItUsing: helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id])
                                    }
                                },
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', formula: (r) => { return helper.html.render.link('/'+r.id, r.name); }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ApiVersion_CL)}', type: 'numeric', property: 'apiVersion',
                                        scoreFormula: (r) => { 
                                            if (r.isApiVersionOld === true) return 1; 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Package_CL)}', property: 'namespace' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Access_CL)}', property: 'specifiedAccess' },
                                    { name: '{!JSENCODE($Label.OrgCheck_IsAbstract_CL)}', property: 'isAbstract', type: 'checkbox' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Type_CL)}', formula: (r) => { 
                                        if (r.isInterface === true) return 'Interface';
                                        if (r.isEnum === true) return 'Enum';
                                        if (r.isClass === true) return 'Class';
                                        return 'Other';
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Implements_CL)}', formula: (r) => {
                                        let html = ''; 
                                        if (r.interfaces) { 
                                            r.interfaces.forEach(
                                                e => html += helper.html.render.escape(e) + '<br />'
                                            ); 
                                        }
                                        return html;
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Size_CL)}', type: 'numeric', property: 'length' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Methods_CL)}', type: 'numeric', property: 'methodsCount' },
                                    { name: '{!JSENCODE($Label.OrgCheck_InnerClasses_CL)}', type: 'numeric', property: 'innerClassesCount' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Annotations_CL)}', formula: (r) => {
                                        let html = ''; 
                                        if (r.annotations) { 
                                            r.annotations.forEach(
                                                e => html += helper.html.render.escape(e.name) + '<br />'
                                            ); 
                                        }
                                        return html;
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Sharing_CL)}', property: 'specifiedSharing', 
                                        formula: (r) => {
                                            if (r.isSharingMissing === true) return '{!JSENCODE($Label.OrgCheck_NotSpecified_CL)}';
                                            if (r.specifiedSharing === 'n/a') return '{!JSENCODE($Label.OrgCheck_NotApplicable_CL)}';
                                            return helper.html.render.escape(r.specifiedSharing);
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isSharingMissing === true) return 1; 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_CodeCverage_CL)}', type: 'numeric', property: 'coverage', 
                                        formula: (r) => { 
                                            if (r.isClass === true) {
                                                if (r.coverage || r.coverage === 0) return helper.html.render.percentage(r.coverage);
                                                cntClsNoCoverage++;
                                                return '{!JSENCODE($Label.OrgCheck_NoData_CL)}';
                                            }
                                            return '{!JSENCODE($Label.OrgCheck_NotApplicable_CL)}';
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isClass === true && (!r.coverage || r.coverage < 0.85)) {
                                                if (r.coverage < 0.85) cntClsLowCoverage++;
                                                return 1;
                                            }
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_RelatedTests_CL)}',
                                        formula: (r) => {
                                            let html = ''; 
                                            if (r.relatedTestClasses) { 
                                                r.relatedTestClasses.forEach(e => {
                                                    html += helper.html.render.link(
                                                            '/'+e, 
                                                            helper.html.render.escape(map.apexClasses[e]?.name)
                                                        ) + '<br />';
                                                }); 
                                            }
                                            return html;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Using_CL)}', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_UsedIn_CL)}', type: 'numeric', 
                                        formula: (r, pr) => { 
                                            if (pr.count_whereIsItUsed > 0) return helper.html.render.checkbox(true) + ' ' + pr.count_whereIsItUsed;
                                            return helper.html.render.checkbox(false) + ' Not used!';
                                        },
                                        scoreFormula: (r, pr) => { 
                                            if (pr.count_whereIsItUsed === 0) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Dependencies_CL)}', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return '{!JSENCODE($Label.OrgCheck_NoDependency_CL)}';
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_CreatedDate_CL)}', type: 'datetime', property: 'createdDate' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ModifiedDate_CL)}', type: 'datetime', property: 'lastModifiedDate' }                                    
                                ],
                                data: map.apexClasses,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                filtering: { formula: (r) => { return r.size !== -1 && r.isTest === false && r.needsRecompilation === false; }},
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true,
                                stickyHeaders: true
                            });

                            // Render the Apex Unit Tests Classes data in a table
                            helper.html.datatable.create({
                                element: 'datatable-apextests',
                                appendCountInElement: 'tab-default-apextests__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', formula: (r) => { return helper.html.render.link('/'+r.id, r.name); }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ApiVersion_CL)}', type: 'numeric', property: 'apiVersion',
                                        scoreFormula: (r) => { 
                                            if (r.isApiVersionOld === true) return 1; 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Package_CL)}', property: 'namespace' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Size_CL)}', type: 'numeric', property: 'length' },
                                    { name: '{!JSENCODE($Label.OrgCheck_SeeAlllData_CL)}', type: 'checkbox', property: 'isTestSeeAllData', 
                                        scoreFormula: (r) => { 
                                            if (r.isTestSeeAllData === true) return 1; 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_NumlberOfAsserts_CL)}', type: 'numeric', property: 'nbSystemAsserts',
                                        formula: (r) => { 
                                            if (r.nbSystemAsserts === 0) return '{!JSENCODE($Label.OrgCheck_NotSpecified_CL)}';
                                            return r.nbSystemAsserts;
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.nbSystemAsserts === 0) return 1; 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Methods_CL)}', type: 'numeric', property: 'methodsCount' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Using_CL)}', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Dependencies_CL)}', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return '{!JSENCODE($Label.OrgCheck_NoDependency_CL)}';
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_CreatedDate_CL)}', type: 'datetime', property: 'createdDate' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ModifiedDate_CL)}', type: 'datetime', property: 'lastModifiedDate' }                                    
                                ],
                                data: map.apexClasses,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                filtering: { formula: (r) => { return r.size !== -1 && r.isTest === true && r.needsRecompilation === false; }},
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true,
                                stickyHeaders: true
                            });

                            let htmlParagraphs = [];

                            // Show alert about recompilation
                            if (cntClsToCompile > 0) {
                                htmlParagraphs.push(
                                    'You have '+cntClsToCompile+' Apex class'+(cntClsToCompile>1?'es':'')+' that need'+(cntClsToCompile>1?'':'s')+' to be <b>recompiled</b>.<br />'+
                                    'Please make sure you click on the <b>plug</b> button in this page to ask for a recompilation of '+(cntClsToCompile>1?'these':'this')+' Apex class'+(cntClsToCompile>1?'es':'')+'.<br />'+
                                    'If some classes still need recompilation after this, you need to check them for sure.<br />'
                                );
                                const compileClassesButton = helper.html.element.get('compile-uncompiled-classes-button');
                                compileClassesButton.onclick = (e) => { 
                                    helper.salesforce.apex.compileClasses(classesToCompile);
                                    return true; 
                                }
                                helper.html.element.addClass(compileClassesButton, ['slds-theme_warning']);
                            }

                            // Show alert about no code coverage
                            if (cntClsNoCoverage > 0 || cntClsLowCoverage > 0) {
                                let coverageHtml = '';
                                if (cntClsNoCoverage > 0) coverageHtml += 'You have '+cntClsNoCoverage+' Apex class'+(cntClsNoCoverage>1?'es':'')+' with NO code coverage AT ALL.<br />';
                                if (cntClsLowCoverage > 0) coverageHtml += 'You have '+cntClsLowCoverage+' Apex class'+(cntClsLowCoverage>1?'es':'')+' with a code coverage < 85%.<br />';
                                coverageHtml += 'Please make sure you click on the <b>like</b> button in this page to go to the setup menu and run all apex unit tests in this org.<br />';
                                coverageHtml += 'If some classes still need code coverage after this, you need to check them for sure.<br />';
                                htmlParagraphs.push(coverageHtml);
                                const runAllTestsButton = helper.html.element.get('run-all-tests');
                                runAllTestsButton.onclick = (e) => { 
                                    helper.salesforce.apex.runAllLocalTests();
                                    return true; 
                                }
                                helper.html.element.addClass(runAllTestsButton, ['slds-theme_warning']);
                            }

                            if (htmlParagraphs.length > 0) {
                                helper.html.message.show(htmlParagraphs);
                            }

                            const objectTriggersCountMap = {};
                            
                            // Render the Apex Triggers data in a table
                            helper.html.datatable.create({
                                element: 'datatable-triggers',
                                appendCountInElement: 'tab-default-triggers__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ApiVersion_CL)}', type: 'numeric', property: 'apiVersion',
                                        scoreFormula: (r) => { 
                                            if (r.isApiVersionOld === true) return 1; 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Package_CL)}', property: 'namespace' },
                                    { name: '{!JSENCODE($Label.OrgCheck_IsActive_CL)}', property: 'isActive', type: 'checkbox', 
                                        scoreFormula: (r) => { 
                                            if (r.isActive === false) return 1; 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Size_CL)}', type: 'numeric', property: 'length',
                                        scoreFormula: (r) => { 
                                            if (r.length > 5000) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_ContainsSoql_CL)}', property: 'hasSOQL',
                                        formula: (r) => { 
                                            return helper.html.render.checkbox(r.hasSOQL); 
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.hasSOQL === true) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_ContainsDml_CL)}', property: 'hasDML', type: 'checkbox', 
                                        scoreFormula: (r) => { 
                                            if (r.hasDML === true) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Object_CL)}', formula: (r) => { 
                                        const objId = r.sobject;
                                        const objName = map.objects[objId]?.label;
                                        // ---
                                        // let's calculate (on the fly) the number of active triggers per object!!
                                        const otc = objectTriggersCountMap[objName] || { 
                                            object: objName, 
                                            activeTriggerCount: 0, 
                                            deactiveTriggerCount: 0 
                                        };
                                        if (r.isActive === true) otc.activeTriggerCount++;
                                        else if (r.isActive === false) otc.deactiveTriggerCount++;
                                        objectTriggersCountMap[objName] = otc;
                                        // ---
                                        return helper.html.render.escape(objName);
                                    }},
                                    { name: '*Insert', property: 'beforeInsert', type: 'checkbox' },
                                    { name: 'Insert*', property: 'afterInsert', type: 'checkbox' },
                                    { name: '*Update', property: 'beforeUpdate', type: 'checkbox' },
                                    { name: 'Update*', property: 'afterUpdate', type: 'checkbox' },
                                    { name: '*Delete', property: 'beforeDelete', type: 'checkbox' },
                                    { name: 'Delete*', property: 'afterDelete', type: 'checkbox' },
                                    { name: 'Undelete*', property: 'afterUndelete', type: 'checkbox' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Annotations_CL)}', formula: (r) => {
                                        let html = ''; 
                                        if (r.annotations) { 
                                            r.annotations.forEach(
                                                e => html += helper.html.render.escape(e.name) + '<br />'
                                            ); 
                                        }
                                        return html;
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Using_CL)}', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Dependencies_CL)}', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return '{!JSENCODE($Label.OrgCheck_NoDependency_CL)}';
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_CreatedDate_CL)}', type: 'datetime', property: 'createdDate' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ModifiedDate_CL)}', type: 'datetime', property: 'lastModifiedDate' }                                    
                                ],
                                data: map.apexTriggers,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true,
                                stickyHeaders: true
                            });

                            // Render the Apex Triggers data in a table
                            helper.html.datatable.create({
                                element: 'datatable-objtriggercounts',
                                appendCountInElement: 'tab-default-objtriggercounts__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', property: 'object' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ActiveTriggers_CL)}', type: 'numeric', property: 'activeTriggerCount', 
                                        scoreFormula: (r) => { 
                                            if (r.activeTriggerCount > 1) return 1; 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_UnactiveTriggers_CL)}', type: 'numeric', property: 'deactiveTriggerCount' }                                            
                                ],
                                data: objectTriggersCountMap,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true,
                                stickyHeaders: true
                            });
                            
                        },
                        actions: { 
                            exportTable: [{
                                table: 'datatable-classes',
                                visibleTab: 'tab-default-classes__item',
                                filename: 'ApexClasses'
                            }, {
                                table: 'datatable-triggers',
                                visibleTab: 'tab-default-triggers__item',
                                filename: 'ApexTriggers'
                            }, {
                                table: 'datatable-objtriggercounts',
                                visibleTab: 'tab-default-objtriggercounts__item',
                                filename: 'ObjectTriggersCount'
                            }],
                            clearCache: { 
                                show: true 
                            }
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>