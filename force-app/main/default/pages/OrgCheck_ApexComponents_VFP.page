<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="html_additional_scripttags" />
        <apex:define name="text_page_title">
            Apex Classes and Triggers
        </apex:define>
        <apex:define name="text_page_subtitle">
            Apex Classes and Triggers Overview<br />
            <small><i>
                This page lists all your <b>Apex Classes and Triggers</b> in three tabs.
                To make sure you get <b>all the benefits</b> from this page, make sure you (1) <b>compile all classes</b> (see the "Plug" icon) and (2) <b>run all tests</b> (see the "Like" icon).
                For each class or trigger, a badness score is calculated based on the following rules. 
                <u>Rule #1:</u> If the item is not used by any other entity (based on the Dependency API), then you get +1. 
                <u>Ryle #2:</u> If the API version of the item is older than 3 year, then you get +1. 
                <u>Ryle #3:</u> If the item needs recompilation, then you get +1. 
                <u>Ryle #4:</u> If the <b>class</b> is not explicitely specifying the sharing, then you get +1. 
                <u>Ryle #5:</u> If the <b>class</b> has not reached a code covergare of <b>85%</b>, then you get +1. 
                <u>Ryle #6:</u> If the <b>trigger</b> is inactive, then you get +1. 
                <u>Ryle #7:</u> If the <b>trigger</b> is 5,000+ characters, then you get +1. 
                <u>Ryle #8:</u> If the <b>trigger</b> is contains SOQL or DML, then you get +1. 
                We also provide the list of SObjects that have triggers, with the specific rules: 
                <u>Rule #9</u> If the count of active triggers per object is greater that one, you get +1.
                By default, the table is ordered by Score descending, in other words the biggest scores come first. 
                If the item has dependencies, you can click on the link "Dependencies" to get a graphical view of where it is used and what it is using.
            </i></small>
        </apex:define>
        <apex:define name="html_actions">
            <div class="slds-page-header__control">
                <a href="/01p" target="_blank" rel="external noopener noreferrer">
                    <button id="compile-all-button" class="slds-button slds-button_icon slds-button_icon-border-filled" title="Compile all">
                        <svg class="slds-button__icon" aria-hidden="true">
                            <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#apex_plugin')}"></use>
                        </svg>
                        <span class="slds-assistive-text">Compile all</span>
                    </button>
                </a>
            </div>
            <div class="slds-page-header__control">
                <a href="/ui/setup/apex/ApexTestQueuePage" target="_blank" rel="external noopener noreferrer">
                    <button id="run-all-tests" class="slds-button slds-button_icon slds-button_icon-border-filled" title="Unit Tests">
                        <svg class="slds-button__icon" aria-hidden="true">
                            <use href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#like')}"></use>
                        </svg>
                        <span class="slds-assistive-text">Unit Tests</span>
                    </button>
                </a>
            </div>
        </apex:define>
        <apex:define name="html_content_core">
            <div class="slds-tabs_default">
                <ul class="slds-tabs_default__nav" role="tablist">
                    <li class="slds-tabs_default__item slds-is-active" title="Classes" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-default-classes" id="tab-default-classes__item">Classes</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Triggers" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-triggers" id="tab-default-triggers__item">Triggers</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Object's triggers count" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-objtriggercounts" id="tab-default-objtriggercounts__item">Object's triggers count</a>
                    </li>
                </ul>
                <div id="tab-default-classes" class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-default-classes__item">
                    <div id="datatable-classes" />
                </div>
                <div id="tab-default-triggers" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-triggers__item">
                    <div id="datatable-triggers" />
                </div>
                <div id="tab-default-objtriggercounts" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-objtriggercounts__item">
                    <div id="datatable-objtriggercounts" />
                </div>
            </div>
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {

                    // Initialize TABS bindings
                    helper.html.tabs.initialize('slds-tabs_default__item', 'slds-tabs_default__content', 'slds-button');

                    // RUN CONTROLLER
                    controller.run({
                        datasets: [ 'apexClasses', 'apexTriggers', 'customObjects' ],
                        dependencies: true,
                        onRecords: function(map) { 

                            let cntClsToCompile = 0;
                            let cntClsNoCoverage = 0;
                            let cntClsLowCoverage = 0;

                            // Render the Apex Classes data in a table
                            helper.html.datatable.create({
                                element: 'datatable-classes',
                                columns: [
                                    { name: 'Name', formula: (r) => { return helper.html.render.link('/'+r.id, r.name); }},
                                    { name: 'Score', type: 'numeric', property: '##score##' },
                                    { name: 'API', type: 'numeric', property: 'apiVersion',
                                        scoreFormula: (r) => { 
                                            if (r.isApiVersionOld === true) return 1; 
                                        }
                                    },
                                    { name: 'Package', property: 'namespace' },
                                    { name: 'Status', 
                                        formula: (r) => {
                                            if (r.needsRecompilation === true) {
                                                cntClsToCompile++;
                                                return 'Recompile!';
                                            }
                                            return 'OK';
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.needsRecompilation === true) return 1; 
                                        }
                                    },
                                    { name: 'Access', property: 'specifiedAccess' },
                                    { name: 'Abst.?', property: 'isAbstract', formula: (r) => { 
                                        return helper.html.render.checkbox(r.isAbstract); 
                                    }},
                                    { name: 'Type', formula: (r) => { 
                                        if (r.isInterface === true) return 'Interface';
                                        if (r.isEnum === true) return 'Enum';
                                        if (r.isClass === true) return 'Class';
                                        return 'Other';
                                    }},
                                    { name: 'Implements', formula: (r) => {
                                        let html = ''; 
                                        if (r.interfaces) { 
                                            r.interfaces.forEach(
                                                e => html += helper.html.render.escape(e) + '<br />'
                                            ); 
                                        }
                                        return html;
                                    }},
                                    { name: 'Size', type: 'numeric', property: 'length' },
                                    { name: 'Methods', type: 'numeric', property: 'methodsCount' },
                                    { name: 'Inner Cls.', type: 'numeric', property: 'innerClassesCount' },
                                    { name: 'Annot.', formula: (r) => {
                                        let html = ''; 
                                        if (r.annotations) { 
                                            r.annotations.forEach(
                                                e => html += helper.html.render.escape(e.name) + '<br />'
                                            ); 
                                        }
                                        return html;
                                    }},
                                    { name: 'Sharing', property: 'specifiedSharing', 
                                        formula: (r) => {
                                            if (r.isSharingMissing === true) return 'Not specified!';
                                            if (r.specifiedSharing === 'n/a') return 'Not Applicable';
                                            return helper.html.render.escape(r.specifiedSharing);
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isSharingMissing === true) return 1; 
                                        }
                                    },
                                    { name: 'Coverage', type: 'numeric', property: 'coverage', 
                                        formula: (r) => { 
                                            if (r.isClass === true) {
                                                if (r.coverage || r.coverage === 0) return helper.html.render.percentage(r.coverage);
                                                cntClsNoCoverage++;
                                                return 'No coverage data';
                                            }
                                            return 'Not Applicable';
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isClass === true && (!r.coverage || r.coverage < 0.85)) {
                                                if (r.coverage < 0.85) cntClsLowCoverage++;
                                                return 1;
                                            }
                                        }
                                    },
                                    { name: 'Related Tests',
                                        formula: (r) => {
                                            let html = ''; 
                                            if (r.relatedTestClasses) { 
                                                r.relatedTestClasses.forEach(e => {
                                                    html += helper.html.render.link(
                                                            '/'+e, 
                                                            helper.html.render.escape(map.apexClasses[e]?.name)
                                                        ) + '<br />';
                                                }); 
                                            }
                                            return html;
                                        }
                                    },
                                    { name: 'Using', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Used in', type: 'numeric', 
                                        formula: (r) => { 
                                            const count = helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]);
                                            if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                            return 'Not used!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]) === 0) return 1;
                                        }
                                    },
                                    { name: 'Dependencies', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return 'No dependency';
                                        }
                                    }
                                ],
                                data: map.apexClasses,
                                sorting: { name: 'Score', order: 'desc' },
                                filtering: { formula: (r) => { return r.size !== -1 && r.isTest === false; }},
                                showSearch: true,
                                showStatistics: true
                            });

                            let html = '';

                            // Show alert about recompilation
                            if (cntClsToCompile > 0) {
                                html += 'You have '+cntClsToCompile+' Apex class'+(cntClsToCompile>1?'es':'')+' that need'+(cntClsToCompile>1?'':'s')+' to be <b>recompiled</b>.<br />';
                                html += 'Please make sure you click on the <b>plug</b> button in this page to go to the setup menu and recompile all classes in this org.<br />';
                                html += 'If some classes still need recompilation after this, you need to check them for sure.<br />';
                                helper.html.element.addClass('compile-all-button', ['slds-theme_warning']);
                            }

                            // Show alert about no code coverage
                            if (cntClsNoCoverage > 0 || cntClsLowCoverage > 0) {
                                if (html) html += '<br />';
                                if (cntClsNoCoverage > 0) html += 'You have '+cntClsNoCoverage+' Apex class'+(cntClsNoCoverage>1?'es':'')+' with NO code coverage AT ALL.<br />';
                                if (cntClsLowCoverage > 0) html += 'You have '+cntClsLowCoverage+' Apex class'+(cntClsLowCoverage>1?'es':'')+' with a code coverage < 85%.<br />';
                                html += 'Please make sure you click on the <b>like</b> button in this page to go to the setup menu and run all apex unit tests in this org.<br />';
                                html += 'If some classes still need code coverage after this, you need to check them for sure.<br />';
                                helper.html.element.addClass('run-all-tests', ['slds-theme_warning']);
                            }

                            if (html) {
                                helper.html.modal.show('Action needed on Apex classes in the Org!', html);
                                helper.html.message.show(html);
                            }

                            const objectTriggersCountMap = {};
                            
                            // Render the Apex Triggers data in a table
                            helper.html.datatable.create({
                                element: 'datatable-triggers',
                                columns: [
                                    { name: 'Name', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: 'Score', type: 'numeric', property: '##score##' },
                                    { name: 'API', type: 'numeric', property: 'apiVersion',
                                        scoreFormula: (r) => { 
                                            if (r.isApiVersionOld === true) return 1; 
                                        }
                                    },
                                    { name: 'Package', property: 'namespace' },
                                    { name: 'Active', property: 'isActive', 
                                        formula: (r) => { 
                                            return helper.html.render.checkbox(r.isActive); 
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isActive === false) return 1; 
                                        }
                                    },
                                    { name: 'Size', type: 'numeric', property: 'length',
                                        scoreFormula: (r) => { 
                                            if (r.length > 5000) return 1;
                                        }
                                    },
                                    { name: 'Contains SOQL', property: 'hasSOQL',
                                        formula: (r) => { 
                                            return helper.html.render.checkbox(r.hasSOQL); 
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.hasSOQL === true) return 1;
                                        }
                                    },
                                    { name: 'Contains DML', property: 'hasDML',
                                        formula: (r) => { 
                                            return helper.html.render.checkbox(r.hasDML); 
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.hasDML === true) return 1;
                                        }
                                    },
                                    { name: 'SObject', formula: (r) => { 
                                        const objId = r.sobject;
                                        const objName = map.customObjects[objId]?.developerName || objId;
                                        // ---
                                        // let's calculate (on the fly) the number of active triggers per object!!
                                        const otc = objectTriggersCountMap[objName] || { 
                                            object: objName, 
                                            activeTriggerCount: 0, 
                                            deactiveTriggerCount: 0 
                                        };
                                        if (r.isActive === true) otc.activeTriggerCount++;
                                        else if (r.isActive === false) otc.deactiveTriggerCount++;
                                        objectTriggersCountMap[objName] = otc;
                                        // ---
                                        return objName;
                                    }},
                                    { name : '*Insert', property: 'beforeInsert', formula: (r) => { 
                                        return helper.html.render.checkbox(r.beforeInsert); 
                                    }},
                                    { name : 'Insert*', property: 'afterInsert', formula: (r) => { 
                                        return helper.html.render.checkbox(r.afterInsert); 
                                    }},
                                    { name : '*Update', property: 'beforeUpdate', formula: (r) => { 
                                        return helper.html.render.checkbox(r.beforeUpdate); 
                                    }},
                                    { name : 'Update*', property: 'afterUpdate', formula: (r) => { 
                                        return helper.html.render.checkbox(r.afterUpdate); 
                                    }},
                                    { name : '*Delete', property: 'beforeDelete', formula: (r) => { 
                                        return helper.html.render.checkbox(r.beforeDelete); 
                                    }},
                                    { name : 'Delete*', property: 'afterDelete', formula: (r) => { 
                                        return helper.html.render.checkbox(r.afterDelete); 
                                    }},
                                    { name : 'Undelete*', property: 'afterUndelete', formula: (r) => { 
                                        return helper.html.render.checkbox(r.afterUndelete); 
                                    }},
                                    { name: 'Annotations', formula: (r) => {
                                        let html = ''; 
                                        if (r.annotations) { 
                                            r.annotations.forEach(
                                                e => html += helper.html.render.escape(e.name) + '<br />'
                                            ); 
                                        }
                                        return html;
                                    }},
                                    { name: 'Using', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Dependencies', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return 'No dependency';
                                        }
                                    }
                                ],
                                data: map.apexTriggers,
                                sorting: { name: 'Score', order: 'desc' },
                                showSearch: true,
                                showStatistics: true
                            });

                            // Render the Apex Triggers data in a table
                            helper.html.datatable.create({
                                element: 'datatable-objtriggercounts',
                                columns: [
                                    { name: 'Name', property: 'object' },
                                    { name: 'Score', type: 'numeric', property: '##score##' },
                                    { name: 'Active triggers', type: 'numeric', property: 'activeTriggerCount', 
                                        scoreFormula: (r) => { 
                                            if (r.activeTriggerCount > 1) return 1; 
                                        }
                                    },
                                    { name: 'Deactive triggers', type: 'numeric', property: 'deactiveTriggerCount' }                                            
                                ],
                                data: objectTriggersCountMap,
                                sorting: { name: 'Score', order: 'desc' },
                                showSearch: true,
                                showStatistics: true
                            });
                            
                        },
                        actions: { 
                            exportTable: [{
                                table: 'datatable-classes',
                                visibleTab: 'tab-default-classes__item',
                                filename: 'ApexClasses'
                            }, {
                                table: 'datatable-triggers',
                                visibleTab: 'tab-default-triggers__item',
                                filename: 'ApexTriggers'
                            }, {
                                table: 'datatable-objtriggercounts',
                                visibleTab: 'tab-default-objtriggercounts__item',
                                filename: 'ObjectTriggersCount'
                            }],
                            clearCache: { 
                                show: true 
                            }
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>