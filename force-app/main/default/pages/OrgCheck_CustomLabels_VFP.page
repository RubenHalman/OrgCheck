<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="html_additional_scripttags" />
        <apex:define name="text_page_title">
            {!$Label.OrgCheck_CustomLabels_Title_CL}
        </apex:define>
        <apex:define name="text_page_subtitle">
            {!$Label.OrgCheck_CustomLabels_Subtitle_CL}
        </apex:define>
        <apex:define name="text_page_description">
            {!$Label.OrgCheck_CustomLabels_Description_CL}
        </apex:define>
        <apex:define name="html_actions">
        </apex:define>
        <apex:define name="html_content_core">
            <div id="datatable" />
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {
                    controller.run({
                        datasets: [ 'customLabels' ],
                        dependencies: true,
                        onRecords: function(map) { 

                            helper.html.datatable.create({
                                element: 'datatable',
                                columns: [
                                    { name: 'Name', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: 'Score', type: 'numeric', property: '##score##' },
                                    { name: 'Namespace', property: 'namespace' },
                                    { name: 'Master Label', property: 'masterLabel' },
                                    { name: 'Category', property: 'category' },
                                    { name: 'IsProtected', property: 'protected' },
                                    { name: 'Language', property: 'language' },
                                    { name: 'Value', formula: (r) => { 
                                        return helper.html.render.escape(helper.html.render.shrinkText(r.value, 100)); 
                                    }},
                                    { name: 'Using', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Used in', type: 'numeric', 
                                        formula: (r) => { 
                                            const count = helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]);
                                            if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                            return 'Not used!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]) === 0) return 1;
                                        }
                                    },
                                    { name: 'Used in Apex Class?', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whereIsItUsedBy(r.id, 'ApexClass', map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count + ' Apex Class' + (count>1?'es':'');
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Used in Flow?', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whereIsItUsedBy(r.id, 'Flow', map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count + ' Flow' + (count>1?'s':'');
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Dependencies', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return 'No dependency';
                                        }
                                    }
                                ],
                                data: map.customLabels,
                                sorting: { name: 'Score', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true
                            });                            
                        },
                        actions: {  
                            exportTable: [{
                                table: 'datatable',
                                filename: 'CustomLabels'
                            }],
                            clearCache: { 
                                show: true 
                            }
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>