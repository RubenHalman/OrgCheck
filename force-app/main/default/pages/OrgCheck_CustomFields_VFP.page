<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="html_additional_scripttags" />
        <apex:define name="text_page_title">
            {!$Label.OrgCheck_CustomFields_Title_CL}
        </apex:define>
        <apex:define name="text_page_subtitle">
            {!$Label.OrgCheck_CustomFields_Subtitle_CL}
        </apex:define>
        <apex:define name="text_page_description">
            <apex:outputText escape="false" value="{!$Label.OrgCheck_CustomFields_Description_CL}" />
        </apex:define>
        <apex:define name="html_actions">
        </apex:define>
        <apex:define name="html_content_core">
            <div id="datatable" />
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {
                    controller.run({
                        datasets: [ 'customFields', 'objects' ],
                        dependencies: true,
                        onRecords: function(map) {

                            helper.html.datatable.create({
                                element: 'datatable',
                                columns: [
                                    { name: '{!$Label.OrgCheck_Object_CL}', formula: (r) => { 
                                        const label = map.objects[r.objectDeveloperName]?.label;
                                        const type = map.objects[r.objectDeveloperName]?.type;
                                        let entityUrl = '';
                                        switch (type) {
                                            case 'CustomSetting':      entityUrl = '/lightning/setup/CustomSettings/page?address=%2F'+r.objectId; break;
                                            case 'CustomObject':       entityUrl = '/lightning/setup/ObjectManager/'+r.objectId+'/Details/view';  break;
                                            case 'CustomEvent':        entityUrl = '/lightning/setup/EventObjects/page?address=%2F'+r.objectId;  break;
                                            case 'KnowledgeArticle':   entityUrl = '/lightning/setup/KnowledgeArticles/page?address=%2F'+r.objectId;  break;
                                            case 'ExternalObject':     entityUrl = '/lightning/setup/ExternalObjects/page?address=%2F'+r.objectId;  break;
                                            case 'BigObject':          entityUrl = '/lightning/setup/BigObjects/page?address=%2F'+r.objectId;  break;
                                            case 'CustomMetadataType': entityUrl = '/lightning/setup/CustomMetadata/page?address=%2F'+r.objectId;  break;
                                        }
                                        let entityLabel = label + (label !== r.objectDeveloperName ? ' ('+r.objectDeveloperName+')' : '');
                                        return helper.html.render.link(entityUrl, helper.html.render.escape(entityLabel));
                                    }},
                                    { name: '{!$Label.OrgCheck_Type_CL}', formula: (r) => { 
                                        const type = map.objects[r.objectDeveloperName]?.type;
                                        let t = '';
                                        switch (type) {
                                            case 'CustomSetting':      t = 'Custom Setting'; break;
                                            case 'CustomObject':       t = 'Custom Object';  break;
                                            case 'CustomEvent':        t = 'Platform Event';  break;
                                            case 'KnowledgeArticle':   t = 'Knowledge Article';  break;
                                            case 'ExternalObject':     t = 'External Object';  break;
                                            case 'BigObject':          t = 'Big Object';  break;
                                            case 'CustomMetadataType': t = 'Custom Metadata Type';  break;
                                            case 'StandardObject':     t = 'Standard';  break;
                                        }
                                        return helper.html.render.escape(t);
                                    }},
                                    { name: '{!$Label.OrgCheck_Field_CL}', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.fieldName)
                                        ); 
                                    }},
                                    { name: '{!$Label.OrgCheck_Score_CL}', type: 'numeric', property: '##score##' },
                                    { name: '{!$Label.OrgCheck_Package_CL}', property: 'package' },
                                    { name: '{!$Label.OrgCheck_FullApiName_CL}', property: 'fullName' },
                                    { name: '{!$Label.OrgCheck_Description_CL}', 
                                        formula: (r) => {
                                            if (r.description) return helper.html.render.escape(r.description);
                                            return '{!$Label.OrgCheck_SetADescription_CL}';
                                        },
                                        scoreFormula: (r) => { 
                                            if (!r.description) return 1; 
                                        }
                                    },
                                    { name: '{!$Label.OrgCheck_Using_CL}', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: '{!$Label.OrgCheck_UsedIn_CL}', type: 'numeric', 
                                        formula: (r) => { 
                                            const count = helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]);
                                            if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                            return '{!$Label.OrgCheck_NotUsed_CL}';
                                        },
                                        scoreFormula: (r) => { 
                                            if (helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]) === 0) return 1;
                                        }
                                    },
                                    { name: 'Used in Page Layout?', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whereIsItUsedBy(r.id, 'Layout', map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count + ' Page Layout' + (count>1?'s':'');
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Used in Apex Class?', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whereIsItUsedBy(r.id, 'ApexClass', map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count + ' Apex Class' + (count>1?'es':'');
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Used in Flow?', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whereIsItUsedBy(r.id, 'Flow', map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count + ' Flow' + (count>1?'s':'');
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: '{!$Label.OrgCheck_Dependencies_CL}', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.fieldName, dep);
                                            return '{!$Label.OrgCheck_NoDependency_CL}';
                                        }
                                    },
                                    { name: '{!$Label.OrgCheck_CreatedDate_CL}', type: 'datetime', property: 'createdDate' },
                                    { name: '{!$Label.OrgCheck_ModifiedDate_CL}', type: 'datetime', property: 'lastModifiedDate' }                                    
                                ],
                                data: map.customFields,
                                sorting: { name: '{!$Label.OrgCheck_Score_CL}', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true
                            });
                        },
                        actions: { 
                            exportTable: [{
                                table: 'datatable',
                                filename: 'CustomFields'
                            }],
                            clearCache: { 
                                show: true 
                            }
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>