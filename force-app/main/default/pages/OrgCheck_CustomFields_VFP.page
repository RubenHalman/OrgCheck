<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="html_additional_scripttags" />
        <apex:define name="text_page_title">
            Custom Fields
        </apex:define>
        <apex:define name="text_page_subtitle">
            Custom Fields Dependency Overview
        </apex:define>
        <apex:define name="html_actions">
        </apex:define>
        <apex:define name="html_content_core">
            <div id="datatable" />
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {
                    controller.run({
                        datasets: [ 'customFields', 'customObjects' ],
                        dependencies: true,
                        onRecords: function(map) {

                            const countWhereIsItReferenced = function(id) {
                                const dep = map.dependencies[id];
                                if (dep) {
                                    const usingTypes = helper.map.keys(dep.using);
                                    if (usingTypes) {
                                        let count = 0;
                                        if (count > 0) {
                                            usingTypes.forEach(u => count += helper.map.keys(dep.using[u]).length );
                                            return helper.html.render.checkbox(true) + ' ' + count;
                                        }
                                    }
                                }
                                return helper.html.render.checkbox(false);
                            }
                            const countWhereIsItUsed = function(id, typeAPI, typeLabel, typesLabel) {
                                const dep = map.dependencies[id];
                                if (dep) {
                                    const usedTypes = helper.map.keys(dep.used);
                                    if (usedTypes) {
                                        if (typeAPI) {
                                            const idx = usedTypes.indexOf(typeAPI);
                                            if (idx >= 0) {
                                                const size = helper.map.keys(dep.used[typeAPI]).length;
                                                if (size > 0) {
                                                    return helper.html.render.checkbox(true) + ' ' + size + ' ' + (size>1?typesLabel:typeLabel);
                                                }
                                            }
                                        } else {
                                            let count = 0;
                                            usedTypes.forEach(u => count += helper.map.keys(dep.used[u]).length );
                                            if (count > 0) {
                                                return helper.html.render.checkbox(true) + ' ' + count;
                                            }
                                        }
                                    }
                                }
                                return helper.html.render.checkbox(false);
                            };

                            helper.html.datatable.create({
                                element: 'datatable',
                                columns: [
                                    { name: 'Object Name', formula: (r) => { 
                                        let entityUrl = '/lightning/setup/ObjectManager/'+r.objectName+'/Details/view';
                                        let entityName = r.objectName;
                                        if (r.objectId) {
                                            switch (map.customObjects[r.objectId]?.type) {
                                                case 'CustomSetting':      entityUrl = '/lightning/setup/CustomSettings/page?address=%2F'+r.objectId; break;
                                                case 'CustomObject':       entityUrl = '/lightning/setup/ObjectManager/'+r.objectId+'/Details/view';  break;
                                                case 'CustomEvent':        entityUrl = '/lightning/setup/EventObjects/page?address=%2F'+r.objectId;  break;
                                                case 'KnowledgeArticle':   entityUrl = '/lightning/setup/KnowledgeArticles/page?address=%2F'+r.objectId;  break;
                                                case 'ExternalObject':     entityUrl = '/lightning/setup/ExternalObjects/page?address=%2F'+r.objectId;  break;
                                                case 'BigObject':          entityUrl = '/lightning/setup/BigObjects/page?address=%2F'+r.objectId;  break;
                                                case 'CustomMetadataType': entityUrl = '/lightning/setup/CustomMetadata/page?address=%2F'+r.objectId;  break;
                                                default:                   entityUrl = '/'+r.objectId;
                                            }
                                            entityName = map.customObjects[r.objectId]?.developerName;
                                        }
                                        return helper.html.render.link(
                                            entityUrl, 
                                            helper.html.render.escape(entityName)
                                        );
                                    }},
                                    { name: 'Object Type', formula: (r) => { 
                                        return r.objectId ? helper.html.render.escape(map.customObjects[r.objectId]?.type) : 'Standard';
                                    }},
                                    { name: 'Field', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.fieldName)
                                        ); 
                                    }},
                                    { name: 'Score', type: 'numeric', property: '##score##' },
                                    { name: 'Package', property: 'packageName' },
                                    { name: 'Full API Name', property: 'fullName' },
                                    { name: 'Ref. by', type: 'numeric', formula: (r) => { 
                                        return countWhereIsItReferenced(r.id);
                                    }},
                                    { name: 'Used in', type: 'numeric', formula: (r) => { 
                                        return countWhereIsItUsed(r.id);
                                    }},
                                    { name: 'Used in Page Layout?', type: 'numeric', formula: (r) => { 
                                        return countWhereIsItUsed(r.id, 'Layout', 'Page Layout', 'Page Layouts');
                                    }},
                                    { name: 'Used in Apex Class?', type: 'numeric', formula: (r) => { 
                                        return countWhereIsItUsed(r.id, 'ApexClass', 'Apex Class', 'Apex Classes');
                                    }},
                                    { name: 'Used in Flow?', type: 'numeric', formula: (r) => { 
                                        return countWhereIsItUsed(r.id, 'Flow', 'Flow', 'Flows');
                                    }},
                                    { name: 'Dependencies', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.fieldName, dep);
                                            return 'No dependency';
                                        }, 
                                        scoreFormula: (r) => { 
                                            if (!map.dependencies[r.id]) return 1; 
                                        }
                                    }
                                ],
                                data: map.customFields,
                                sorting: { name: 'Score', order: 'desc' },
                                showSearch: true,
                                showStatistics: true
                            });
                        },
                        actions: { 
                            exportTable: [{
                                table: 'datatable',
                                filename: 'CustomFields'
                            }],
                            clearCache: { 
                                show: true 
                            },
                            help: {
                                content: [
                                    'This page shows the Custom Fields.',
                                    'The <b>SCORE</b> is computed with the following rule: '+
                                        '<ul class="slds-list_dotted"><li><code>+1</code> if the fields has no dependency.</li></ul>',
                                    'The <b>DEPENDENCIES</b> is showing where the field is used and '+
                                        'what it is using. You can click on each diagram to have it shown in '+
                                        'a dialog box.'
                                ]
                            }
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>