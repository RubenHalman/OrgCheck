<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="html_additional_scripttags" />
        <apex:define name="text_page_title">
            Visual/UI Components
        </apex:define>
        <apex:define name="text_page_subtitle">
            Visual/UI Components Overview
        </apex:define>
        <apex:define name="text_page_description">
            This page lists all your <b>Visual Components</b> in five tabs:<br />
            <ul class="slds-list_dotted">
                <li>The first tab called <b>Visual Force Pages</b> is a tabular list of all the VF pages in this org.</li>
                <li>The second tab called <b>Visual Force Components</b> is a tabular list of all VF components in this org.</li>
                <li>The third tab called <b>Lightning Pages</b> is a tabular list of all the Lightning pages (aka Flexi Pages for the ones that are deploying) in this org.</li>
                <li>The fourth tab called <b>Lightning Aura Components</b> is a tabular list of all the Aura Components in this org.</li>
                <li>The fifth tab called <b>Lightning Web Components</b> is a tabular list of all the LWC in this org.</li>
            </ul>
            <br />
            On all the tables:<br />
            <ul class="slds-list_dotted">
                <li>The column <b>score</b> is calculated based on the following rules:
                    <ol class="slds-list_ordered">
                        <li>If the item is not used by any other entity (based on the Dependency API), then you get +1.</li>
                        <li>When applicable, if the API version used by the item is older than three year, then you get +1. </li>
                        <li>If the item has no description, then you get +1.</li>
                    </ol>
                </li>
                <li>By default, the table is ordered by Score descending, in other words the biggest scores come first.</li>
                <li>If the item has dependencies, you can click on the link "Dependencies" to get a graphical view of where 
                    it is used and what it is using.</li>
            </ul>
            <br />
        </apex:define>
        <apex:define name="html_actions">
        </apex:define>
        <apex:define name="html_content_core">
            <div class="slds-tabs_default">
                <ul class="slds-tabs_default__nav" role="tablist">
                    <li class="slds-tabs_default__item slds-is-active" title="Visual Force Pages" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-default-vfps" id="tab-default-vfps__item">Visual Force Pages</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Visual Force Components" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-vfcs" id="tab-default-vfcs__item">Visual Force Components</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Lightning Pages" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-lps" id="tab-default-lps__item">Lightning Pages</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Lightning Aura Components" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-lacs" id="tab-default-lacs__item">Lightning Aura Components</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Lightning Web Components" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-lwcs" id="tab-default-lwcs__item">Lightning Web Components</a>
                    </li>
                </ul>
                <div id="tab-default-vfps" class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-default-vfps__item">
                    <div id="datatable-vfps" />
                </div>
                <div id="tab-default-vfcs" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-vfcs__item">
                    <div id="datatable-vfcs" />
                </div>
                <div id="tab-default-lps" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-lps__item">
                    <div id="datatable-lps" />
                </div>
                <div id="tab-default-lacs" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-lacs__item">
                    <div id="datatable-lacs" />
                </div>
                <div id="tab-default-lwcs" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-lwcs__item">
                    <div id="datatable-lwcs" />
                </div>
            </div>
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {

                    // Initialize TABS bindings
                    helper.html.tabs.initialize('slds-tabs_default__item', 'slds-tabs_default__content', 'slds-button');

                    // =================================
                    // RUN CONTROLLER
                    // =================================
                    controller.run({
                        datasets: [ 'vfPages', 'vfComponents', 'auraPages', 'auraComponents', 'lwComponents' ],
                        dependencies: true,
                        onRecords: function(map) { 

                            // Render the Visual Force Pages data in a table
                            helper.html.datatable.create({
                                element: 'datatable-vfps',
                                columns: [
                                    { name: 'Name', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: 'Score', type: 'numeric', property: '##score##' },
                                    { name: 'API', type: 'numeric', property: 'apiVersion',
                                        scoreFormula: (r) => {
                                            if (r.isApiVersionOld === true) return 1;
                                        }
                                    },
                                    { name: 'Mobile', property: 'mobile', formula: (r) => { 
                                        return helper.html.render.checkbox(r.mobile); 
                                    }},
                                    { name: 'Package', property: 'namespace' },
                                    { name: 'Description', 
                                        formula: (r) => {
                                            if (r.description) return helper.html.render.escape(r.description);
                                            return 'You should set a description to this Visual Force Page!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (!r.description) return 1; 
                                        }
                                    },
                                    { name: 'Using', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Used in', type: 'numeric', 
                                        formula: (r) => { 
                                            const count = helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]);
                                            if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                            return 'Not used!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]) === 0) return 1;
                                        }
                                    },
                                    { name: 'Dependencies', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return 'No dependency';
                                        }
                                    }
                                ],
                                data: map.vfPages,
                                sorting: { name: 'Score', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true
                            });

                            // Render the Visual Force Components data in a table
                            helper.html.datatable.create({
                                element: 'datatable-vfcs',
                                columns: [
                                    { name: 'Name', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: 'Score', type: 'numeric', property: '##score##' },
                                    { name: 'API', type: 'numeric', property: 'apiVersion',
                                        scoreFormula: (r) => {
                                            if (r.isApiVersionOld === true) return 1;
                                        }
                                    },
                                    { name: 'Package', property: 'namespace' },
                                    { name: 'Description', 
                                        formula: (r) => {
                                            if (r.description) return helper.html.render.escape(r.description);
                                            return 'You should set a description to this Visual Force Component!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (!r.description) return 1; 
                                        }
                                    },
                                    { name: 'Using', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Used in', type: 'numeric', 
                                        formula: (r) => { 
                                            const count = helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]);
                                            if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                            return 'Not used!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]) === 0) return 1;
                                        }
                                    },
                                    { name: 'Dependencies', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return 'No dependency';
                                        }
                                    }                                ],
                                data: map.vfComponents,
                                sorting: { name: 'Score', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true
                            });   

                            // Render the Lighnting Pages data in a table
                            helper.html.datatable.create({
                                element: 'datatable-lps',
                                columns: [
                                    { name: 'Name', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: 'Score', type: 'numeric', property: '##score##' },
                                    { name: 'Package', property: 'namespace' },
                                    { name: 'Description', 
                                        formula: (r) => {
                                            if (r.description) return helper.html.render.escape(r.description);
                                            return 'You should set a description to this Lightning Page!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (!r.description) return 1; 
                                        }
                                    },
                                    { name: 'Using', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Used in', type: 'numeric', 
                                        formula: (r) => { 
                                            const count = helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]);
                                            if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                            return 'Not used!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]) === 0) return 1;
                                        }
                                    },
                                    { name: 'Dependencies', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return 'No dependency';
                                        }
                                    }
                                ],
                                data: map.auraPages,
                                sorting: { name: 'Score', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true
                            });   
                            
                            // Render the Lighnting Aura Components data in a table
                            helper.html.datatable.create({
                                element: 'datatable-lacs',
                                columns: [
                                    { name: 'Name', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: 'Score', type: 'numeric', property: '##score##' },
                                    { name: 'API', type: 'numeric', property: 'apiVersion',
                                        scoreFormula: (r) => {
                                            if (r.isApiVersionOld === true) return 1;
                                        }
                                    },
                                    { name: 'Package', property: 'namespace' },
                                    { name: 'Description', 
                                        formula: (r) => {
                                            if (r.description) return helper.html.render.escape(r.description);
                                            return 'You should set a description to this Aura Component!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (!r.description) return 1; 
                                        }
                                    },
                                    { name: 'Using', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Used in', type: 'numeric', 
                                        formula: (r) => { 
                                            const count = helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]);
                                            if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                            return 'Not used!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]) === 0) return 1;
                                        }
                                    },
                                    { name: 'Dependencies', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return 'No dependency';
                                        }
                                    }                                ],
                                data: map.auraComponents,
                                sorting: { name: 'Score', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true
                            });  

                            // Render the Lighnting Web Components data in a table
                            helper.html.datatable.create({
                                element: 'datatable-lwcs',
                                columns: [
                                    { name: 'Name', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: 'Score', type: 'numeric', property: '##score##' },
                                    { name: 'API', type: 'numeric', property: 'apiVersion',
                                        scoreFormula: (r) => {
                                            if (r.isApiVersionOld === true) return 1;
                                        }
                                    },
                                    { name: 'Package', property: 'namespace' },
                                    { name: 'Description', 
                                        formula: (r) => {
                                            if (r.description) return helper.html.render.escape(r.description);
                                            return 'You should set a description to this Web Component!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (!r.description) return 1; 
                                        }
                                    },
                                    { name: 'Using', type: 'numeric', formula: (r) => { 
                                        const count = helper.html.render.whatIsItUsing(r.id, map.dependencies[r.id]);
                                        if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                        return helper.html.render.checkbox(false);
                                    }},
                                    { name: 'Used in', type: 'numeric', 
                                        formula: (r) => { 
                                            const count = helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]);
                                            if (count > 0) return helper.html.render.checkbox(true) + ' ' + count;
                                            return 'Not used!';
                                        },
                                        scoreFormula: (r) => { 
                                            if (helper.html.render.whereIsItUsed(r.id, map.dependencies[r.id]) === 0) return 1;
                                        }
                                    },
                                    { name: 'Dependencies', 
                                        formula: (r) => { 
                                            const dep = map.dependencies[r.id]; 
                                            if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                            return 'No dependency';
                                        }
                                    }
                                ],
                                data: map.lwComponents,
                                sorting: { name: 'Score', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true
                            });
                        },
                        actions: {  
                            clearCache: { 
                                show: true 
                            },
                            exportTable: [{
                                table: 'datatable-vfps',
                                visibleTab: 'tab-default-vfps__item',
                                filename: 'VisualForcePages'
                            }, {
                                table: 'datatable-vfcs',
                                visibleTab: 'tab-default-vfcs__item',
                                filename: 'VisualForceComponents'
                            }, {
                                table: 'datatable-lps',
                                visibleTab: 'tab-default-lps__item',
                                filename: 'LightningPages'
                            }, {
                                table: 'datatable-lacs',
                                visibleTab: 'tab-default-lacs__item',
                                filename: 'LightningAuraComponents'
                            }, {
                                table: 'datatable-lwcs',
                                visibleTab: 'tab-default-lwcs__item',
                                filename: 'LightningWebComponents'
                            }]
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>