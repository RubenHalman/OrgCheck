<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="text_page_icon">ðŸ‘®</apex:define> 
        <apex:define name="text_page_title">{!$Label.OrgCheck_ProfilePermSets_Title_CL}</apex:define>
        <apex:define name="text_page_subtitle">{!$Label.OrgCheck_ProfilePermSets_Subtitle_CL}</apex:define>
        <apex:define name="text_page_description">
            <apex:outputText escape="false" value="{!$Label.OrgCheck_ProfilePermSets_Description1_CL}" />
            <apex:outputText escape="false" value="{!$Label.OrgCheck_ProfilePermSets_Description2_CL}" />
            <apex:outputText escape="false" value="{!$Label.OrgCheck_ProfilePermSets_Description3_CL}" />
        </apex:define>
        <apex:define name="html_actions">
        </apex:define>
        <apex:define name="html_content_core">
            <div class="slds-tabs_default">
                <ul class="slds-tabs_default__nav" role="tablist">
                    <li class="slds-tabs_default__item slds-is-active" title="Profiles" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-default-profiles" id="tab-default-profiles__item">Profiles</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Permission Sets" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-permsets" id="tab-default-permsets__item">Permission Sets</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Login Hours Restrictions" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-loginhours" id="tab-default-loginhours__item">Login Hours Restrictions</a>
                    </li>
                    <li class="slds-tabs_default__item" title="IP Ranges Restrictions" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-ipranges" id="tab-default-ipranges__item">IP Range Restrictions</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Comparator" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-comparator" id="tab-default-comparator__item">Comparator</a>
                    </li>
                </ul>
                <div id="tab-default-profiles" class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-default-profiles__item">
                    <div id="datatable-profiles" />
                </div>
                <div id="tab-default-permsets" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-permsets__item">
                    <div id="datatable-permissionSets" />
                </div>
                <div id="tab-default-loginhours" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-loginhours__item">
                    <div id="datatable-profileLoginHours" />
                </div>
                <div id="tab-default-ipranges" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-ipranges__item">
                    <div id="datatable-profileRangeIPs" />
                </div>
                <div id="tab-default-comparator" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-comparator__item">
                    <div class="slds-grid slds-gutters">
                        <div class="slds-col slds-size_1-of-1 slds-medium-size_4-of-12 slds-large-size_4-of-12">
                            <article class="slds-card">
                                <div class="slds-card__header slds-grid">
                                    <header class="slds-media slds-media_center slds-has-flexi-truncate">
                                        <div class="slds-media__figure">
                                            <span class="slds-icon_container slds-icon-standard-account" title="Select Profiles and/or Permission Sets">
                                                <svg class="slds-icon slds-icon_small" aria-hidden="true">
                                                    <use href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#user')}"></use>
                                                </svg>
                                                <span class="slds-assistive-text">Select Profiles and/or Permission Sets</span>
                                            </span>
                                        </div>
                                        <div class="slds-media__body">
                                            <h2 class="slds-card__header-title slds-card__header-link slds-truncate">
                                                Select Profiles and/or Permission Sets
                                            </h2>
                                        </div>
                                        <div class="slds-no-flex"></div>
                                    </header>
                                </div>
                                <div class="slds-card__body slds-card__body_inner">
                                    <div class="slds-form-element">
                                        <label class="slds-form-element__label" for="input-search-comparator">Search</label>
                                        <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon_left">
                                            <svg class="slds-icon slds-input__icon slds-input__icon_left slds-icon-text-default" aria-hidden="true">
                                                <use href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#search')}"></use>
                                            </svg>
                                            <input type="text" id="input-search-comparator" placeholder="Search a profile or a permission set to compare..." class="slds-input" />
                                        </div>
                                    </div>
                                    <div class="slds-dueling-list__column">
                                        <span class="slds-form-element__label" id="label-103">Results:</span>
                                        <div class="slds-dueling-list__options" style="width: 100%;">
                                            <ul aria-describedby="option-drag-label" aria-labelledby="label-103" 
                                                aria-multiselectable="true" class="slds-listbox slds-listbox_vertical" 
                                                role="listbox" id="resultlist-search-comparator" />
                                        </div>
                                    </div>
                                </div>
                            </article>
                        </div>
                        <div class="slds-col slds-size_1-of-1 slds-medium-size_8-of-12 slds-large-size_8-of-12">
                            <article class="slds-card">
                                <div class="slds-card__header slds-grid">
                                    <header class="slds-media slds-media_center slds-has-flexi-truncate">
                                        <div class="slds-media__figure">
                                            <span class="slds-icon_container slds-icon-standard-account" title="Comparison matrix">
                                                <svg class="slds-icon slds-icon_small" aria-hidden="true">
                                                    <use href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#user')}"></use>
                                                </svg>
                                                <span class="slds-assistive-text">Comparison matrix</span>
                                            </span>
                                        </div>
                                        <div class="slds-media__body">
                                            <h2 class="slds-card__header-title slds-card__header-link slds-truncate">
                                                Comparison matrix
                                            </h2>
                                        </div>
                                        <div class="slds-no-flex"></div>
                                    </header>
                                </div>
                                <div class="slds-card__body slds-card__body_inner">
                                    <div id="thematrix-comparator" />
                                </div>
                            </article>
                        </div>
                    </div>
                </div>
            </div>
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {

                    // Initialize TABS bindings
                    helper.html.tabs.initialize('slds-tabs_default__item', 'slds-tabs_default__content', 'slds-button');

                    // =================================
                    // RUN CONTROLLER
                    // =================================
                    controller.run({
                        datasets: [ 'profiles', 'permissionSets', 'permissionSetAssignments' ],
                        onRecords: function(map) { 

                            const searchComparatorIndexByName = {};

                            // -------------------------------------------
                            // PROFILES
                            // -------------------------------------------
                            helper.html.datatable.create({
                                element: 'datatable-profiles',
                                appendCountInElement: 'tab-default-profiles__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', formula: (r) => { 
                                        searchComparatorIndexByName[r.name + ' (profile)'] = { id: r.permissionSetId, type: 'profile' };
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: '{!JSENCODE($Label.OrgCheck_IsCustom_CL)}', property: 'isCustom', formula: (r) => { 
                                        return helper.html.render.checkbox(r.isCustom); 
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_License_CL)}', property: 'license' },
                                    { name: '{!JSENCODE($Label.OrgCheck_UserType_CL)}', property: 'userType' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Package_CL)}', property: 'package' },
                                    { name: '{!JSENCODE($Label.OrgCheck_NbActiveUsers_CL)}', 
                                        formula: (r) => { 
                                            if (r.isUnusedCustom === true) return '{!JSENCODE($Label.OrgCheck_NoUserForThisProfile_CL)}'; 
                                            if (r.membersCount < 101) return helper.html.render.format('{!JSENCODE($Label.OrgCheck_XUsers_CL)}', r.membersCount);
                                            return '{!JSENCODE($Label.OrgCheck_More100Users_CL)}';
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isUnusedCustom === true) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Description_CL)}', 
                                        formula: (r) => {
                                            if (r.isUndescribedCustom === true) return '{!JSENCODE($Label.OrgCheck_SetADescription_CL)}';
                                            return helper.html.render.escape(r.description);
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isUndescribedCustom === true) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_CreatedDate_CL)}', type: 'datetime', property: 'createdDate' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ModifiedDate_CL)}', type: 'datetime', property: 'lastModifiedDate' }                                    
                                ],
                                data: map.profiles,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true
                            });

                            // -------------------------------------------
                            // PROFILE LOGIN RESTRICTIONS
                            // -------------------------------------------
                            helper.html.datatable.create({
                                element: 'datatable-profileLoginHours',
                                appendCountInElement: 'tab-default-loginhours__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Profile_CL)}', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        );
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Monday_CL)}', formula: (r) => { return r.loginHours.monday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.monday.from, r.loginHours.monday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Tuesday_CL)}', formula: (r) => { return r.loginHours.tuesday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.tuesday.from,  r.loginHours.tuesday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Wednesday_CL)}', formula: (r) => { return r.loginHours.wednesday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.wednesday.from,  r.loginHours.wednesday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Thursday_CL)}', formula: (r) => { return r.loginHours.thursday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.thursday.from,  r.loginHours.thursday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Friday_CL)}', formula: (r) => { return r.loginHours.friday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.friday.from, r.loginHours.friday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Saturday_CL)}', formula: (r) => { return r.loginHours.saturday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.saturday.from,  r.loginHours.saturday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Sunday_CL)}', formula: (r) => { return r.loginHours.sunday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.sunday.from,  r.loginHours.sunday.to) : '' }},
                                ],
                                data: map.profiles,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Profile_CL)}', order: 'asc' },
                                filtering: { formula: (r) => { return r.loginHours ? true : false; }},
                                showSearch: false,
                                showStatistics: false,
                                showLineCount: true
                            });

                            // -------------------------------------------
                            // PROFILE RANGE IP
                            // -------------------------------------------
                            helper.html.datatable.create({
                                element: 'datatable-profileRangeIPs',
                                appendCountInElement: 'tab-default-ipranges__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Profile_CL)}', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Starts_CL)}', formula: (r) => { 
                                        let html = '';
                                        r.loginIpRanges.forEach(i => html += i.startAddress + '<br />');
                                        return html;
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Ends_CL)}', formula: (r) => { 
                                        let html = '';
                                        r.loginIpRanges.forEach(i => html += i.endAddress + '<br />');
                                        return html;
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Description_CL)}', formula: (r) => { 
                                        let html = '';
                                        r.loginIpRanges.forEach(i => html += helper.html.render.escape(i.description) + '<br />');
                                        return html;
                                    }}
                                ],
                                data: map.profiles,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Profile_CL)}', order: 'asc' },
                                filtering: { formula: (r) => { return r.loginIpRanges && r.loginIpRanges.length > 0 ? true : false; }},
                                showSearch: false,
                                showStatistics: false,
                                showLineCount: true
                            });

                            // -------------------------------------------
                            // PERMISSION SETS
                            // -------------------------------------------
                            const assignmentsPerPS = {};
                            helper.map.iterate2(map.permissionSetAssignments, function(p, i, s) {
                                let assignments = assignmentsPerPS[p.permissionSetId];
                                if (!assignments) {
                                    assignments = assignmentsPerPS[p.permissionSetId] = { assignees: [], uniqueProfiles: {} };
                                }
                                assignments.assignees.push(p.assigneeId);
                                if (!assignments.uniqueProfiles[p.assigneeProfileId]) {
                                    assignments.uniqueProfiles[p.assigneeProfileId] = { count: 1 };
                                } else {
                                    assignments.uniqueProfiles[p.assigneeProfileId].count++;
                                }
                            });
                            helper.html.datatable.create({
                                element: 'datatable-permissionSets',
                                appendCountInElement: 'tab-default-permsets__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', 
                                        formula: (r) => { 
                                            if (r.isGroup === false) {
                                                searchComparatorIndexByName[r.name + ' (permission set)'] = { id: r.id, type: 'pset' };
                                            }
                                            return helper.html.render.link(
                                                r.isGroup ? ('/'+r.groupId) : ('/'+r.id), 
                                                helper.html.render.escape(r.name)
                                            ); 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_IsGroup_CL)}', property: 'isGroup', formula: (r) => { 
                                        return helper.html.render.checkbox(r.isGroup); 
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: '{!JSENCODE($Label.OrgCheck_IsCustom_CL)}', property: 'isCustom', formula: (r) => { 
                                        return helper.html.render.checkbox(r.isCustom); 
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_License_CL)}', property: 'license' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Package_CL)}', property: 'package' },
                                    { name: '{!JSENCODE($Label.OrgCheck_NbActiveUsers_CL)}', 
                                        formula: (r) => { 
                                            if (r.isUnusedCustom === true) return 'No user for this custom permission set!'; 
                                            const membersCount = assignmentsPerPS[r.id]?.assignees?.length || 0;
                                            if (membersCount < 101) return helper.html.render.format('{!JSENCODE($Label.OrgCheck_XUsers_CL)}', membersCount);                                            
                                            return '{!JSENCODE($Label.OrgCheck_More100Users_CL)}';
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isUnusedCustom === true) return 1;
                                        }
                                    },

                                    { name: '{!JSENCODE($Label.OrgCheck_AssignedUsersProfiles_CL)}', formula: (r) => { 
                                        let html = '';
                                        helper.map.iterate2(assignmentsPerPS[r.id]?.uniqueProfiles, function(v, i, l, pid) {
                                            html += helper.html.render.link(
                                                '/'+pid, 
                                                helper.html.render.escape(map.profiles[pid]?.name)) + ' (' + v.count + ')<br />';
                                        });
                                        return html;
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Description_CL)}', 
                                        formula: (r) => {
                                            if (r.isUndescribedCustom === true) return '{!JSENCODE($Label.OrgCheck_SetADescription_CL)}';
                                            return helper.html.render.escape(r.description);
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isUndescribedCustom === true) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_CreatedDate_CL)}', type: 'datetime', property: 'createdDate' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ModifiedDate_CL)}', type: 'datetime', property: 'lastModifiedDate' }                                    
                                ],
                                data: map.permissionSets,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true
                            });

                            // -------------------------------------------
                            // COMPARATOR
                            // -------------------------------------------
                            const paintMatrix = function() {
                                helper.html.datatable.clean('thematrix-comparator');
                                const columns = [ { name: 'Object', property: 'sobject' } ];
                                const permissionSetIds = [];
                                Object.keys(searchComparatorIndexByName)
                                    .filter(n => searchComparatorIndexByName[n].selected === true)
                                    .forEach(n => { 
                                        const id = searchComparatorIndexByName[n].id;
                                        columns.push({ name: n, property: id, orientation: 'vertical' }); 
                                        permissionSetIds.push(id);
                                    });
                                helper.salesforce.cruds(permissionSetIds, results => { 
                                    const matrixData = {};
                                    results.forEach(r => {
                                        const d = matrixData[r.SobjectType] || { sobject: r.SobjectType };
                                        d[r.ParentId] = 
                                            (r.PermissionsCreate === true ? 'C' : '') +
                                            (r.PermissionsRead === true ? 'R' : '') +
                                            (r.PermissionsEdit === true ? 'U' : '') +
                                            (r.PermissionsDelete === true ? 'D' : '') +
                                            (r.PermissionsViewAllRecords === true ? 'v' : '') +
                                            (r.PermissionsModifyAllRecords === true ? 'm' : '');
                                        matrixData[r.SobjectType] = d;
                                    });
                                    helper.html.datatable.create({
                                        element: 'thematrix-comparator',
                                        columns: columns,
                                        data: matrixData
                                    });
                                }, e => { 
                                    console.error(e); 
                                });
                            };
                            const inputSearch = helper.html.element.get('input-search-comparator');
                            const resultList = helper.html.element.get('resultlist-search-comparator');
                            const paintResult = inputSearch.onkeyup = function(e) { 
                                helper.html.element.removeAllChild(resultList);
                                Object.keys(searchComparatorIndexByName)
                                    .filter(name => inputSearch.value.length < 2 || name.toUpperCase().includes(inputSearch.value.toUpperCase()))
                                    .sort()
                                    .forEach(name => {
                                        const result = helper.html.element.create('li');
                                        helper.html.element.addClass(result, ['slds-listbox__item']);
                                        const result_div = helper.html.element.create('div');
                                        helper.html.element.addClass(result_div, ['slds-listbox__option', 'slds-listbox__option_plain', 'slds-media', 'slds-media_small', 'slds-media_inline']);
                                        const result_span = helper.html.element.create('span');
                                        helper.html.element.setText(result_span, name);
                                        helper.html.element.appendChild(result_div, result_span);
                                        helper.html.element.appendChild(result, result_div);
                                        helper.html.element.appendChild(resultList, result);
                                        result.onclick = function(e) {
                                            searchComparatorIndexByName[name].selected = true;
                                            paintMatrix();
                                        };
                                    });
                            };
                            paintResult();

                            /*const crudMap1 = {};
                            helper.map.iterate2(map.objectCRUDs, function(d, i, s) { 
                                let index;
                                if (d.parent.name === 'Analytics Cloud Integration User') index = 0;
                                else if (d.parent.name === 'Buyer Manager') index = 1;
                                else if (d.parent.name === 'Read Only') index = 2;
                                else return;
                                const record = crudMap1[d.sobject] || {};
                                if (! record['object']) record['object'] = d.sobject;
                                record['pset'+index] = 
                                    (d.permissions.create === true ? 'C' : '') +
                                    (d.permissions.read === true ? 'R' : '') +
                                    (d.permissions.update === true ? 'U' : '') +
                                    (d.permissions.delete === true ? 'D' : '') +
                                    (d.permissions.viewAll === true ? 'v' : '') +
                                    (d.permissions.modifyAll === true ? 'm' : '');
                                crudMap1[d.sobject] = record;
                            });

                            helper.html.datatable.create({
                                element: 'datatable-objectCRUDs-1',
                                columns: [
                                    { name: 'Object', property: 'object' },
                                    { name: 'Analytics Cloud Integration User', property: 'pset1' },
                                    { name: 'Buyer Manager', property: 'pset2' },
                                    { name: 'Read Only', property: 'pset3' }
                                ],
                                data: crudMap1,
                                sorting: { name: 'Object', order: 'asc' },
                                showSearch: true,
                                showLineCount: true
                            });

                            const crudMap2 = {};
                            helper.map.iterate2(map.objectCRUDs, function(d, i, s) { 
                                let index;
                                if (d.sobject === 'Account') index = 0;
                                else if (d.sobject === 'Contact') index = 1;
                                else if (d.sobject === 'Opportunity') index = 2;
                                else return;
                                const record = crudMap2[d.parent.name] || {};
                                if (! record['parent']) record['parent'] = d.parent.name;
                                record['object'+index] = 
                                    (d.permissions.create === true ? 'C' : '') +
                                    (d.permissions.read === true ? 'R' : '') +
                                    (d.permissions.update === true ? 'U' : '') +
                                    (d.permissions.delete === true ? 'D' : '') +
                                    (d.permissions.viewAll === true ? 'v' : '') +
                                    (d.permissions.modifyAll === true ? 'm' : '');
                                crudMap2[d.parent.name] = record;
                            });

                            helper.html.datatable.create({
                                element: 'datatable-objectCRUDs-2',
                                columns: [
                                    { name: 'Profile/PermissionSet', property: 'parent' },
                                    { name: 'Account', property: 'object1' },
                                    { name: 'Contact', property: 'object2' },
                                    { name: 'Opportunity', property: 'object3' }
                                ],
                                data: crudMap2,
                                sorting: { name: 'Profile/PermissionSet', order: 'asc' },
                                showSearch: true,
                                showLineCount: true
                            });*/
                        },
                        actions: {  
                            clearCache: { 
                                show: true 
                            },
                            exportTable: [{
                                table: 'datatable-profiles',
                                visibleTab: 'tab-default-profiles__item',
                                filename: 'Profiles'
                            }, {
                                table: 'datatable-permissionSets',
                                visibleTab: 'tab-default-permsets__item',
                                filename: 'PermissionSets'
                            }, {
                                table: 'datatable-profileLoginHours',
                                visibleTab: 'tab-default-loginhours__item',
                                filename: 'LoginHoursRestrictions'
                            }, {
                                table: 'datatable-profileRangeIPs',
                                visibleTab: 'tab-default-ipranges__item',
                                filename: 'IPRangesRestrictions'
                            }]
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>