<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="text_page_icon">ðŸ‘®</apex:define> 
        <apex:define name="text_page_title">{!$Label.OrgCheck_ProfilePermSets_Title_CL}</apex:define>
        <apex:define name="text_page_subtitle">{!$Label.OrgCheck_ProfilePermSets_Subtitle_CL}</apex:define>
        <apex:define name="text_page_description">
            <apex:outputText escape="false" value="{!$Label.OrgCheck_ProfilePermSets_Description1_CL}" />
            <apex:outputText escape="false" value="{!$Label.OrgCheck_ProfilePermSets_Description2_CL}" />
            <apex:outputText escape="false" value="{!$Label.OrgCheck_ProfilePermSets_Description3_CL}" />
        </apex:define>
        <apex:define name="html_actions">
        </apex:define>
        <apex:define name="html_content_core">
            <div class="slds-tabs_default">
                <ul class="slds-tabs_default__nav" role="tablist">
                    <li class="slds-tabs_default__item slds-is-active" title="Profiles" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-default-profiles" id="tab-default-profiles__item">Profiles</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Permission Sets" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-permsets" id="tab-default-permsets__item">Permission Sets</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Login Hours Restrictions" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-loginhours" id="tab-default-loginhours__item">Login Hours Restrictions</a>
                    </li>
                    <li class="slds-tabs_default__item" title="IP Ranges Restrictions" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-ipranges" id="tab-default-ipranges__item">IP Range Restrictions</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Profile Password Policies" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-ppwdpolicies" id="tab-default-ppwdpolicies__item">Profile Password Policies</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Comparator" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-comparator" id="tab-default-comparator__item">Comparator</a>
                    </li>
                </ul>
                <div id="tab-default-profiles" class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-default-profiles__item">
                    <div id="datatable-profiles" />
                </div>
                <div id="tab-default-permsets" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-permsets__item">
                    <div id="datatable-permissionSets" />
                </div>
                <div id="tab-default-loginhours" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-loginhours__item">
                    <div id="datatable-profileLoginHours" />
                </div>
                <div id="tab-default-ipranges" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-ipranges__item">
                    <div id="datatable-profileRangeIPs" />
                </div>
                <div id="tab-default-ppwdpolicies" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-ppwdpolicies__item">
                    <div id="datatable-pwdPolicies" />
                </div>
                <div id="tab-default-comparator" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-comparator__item">
                    <div class="slds-grid slds-gutters">
                        <div class="slds-col slds-size_10-of-12 slds-medium-size_4-of-12 slds-large-size_4-of-12">
                            <article class="slds-card">
                                <div class="slds-card__header slds-grid">
                                    <header class="slds-media slds-media_center slds-has-flexi-truncate">
                                        <div class="slds-media__figure">
                                            <span class="slds-icon_container slds-icon-standard-account" title="Select Profiles and/or Permission Sets">
                                                <svg class="slds-icon slds-icon_small" aria-hidden="true">
                                                    <use href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#multi_picklist')}"></use>
                                                </svg>
                                                <span class="slds-assistive-text">Select Profiles and/or Permission Sets</span>
                                            </span>
                                        </div>
                                        <div class="slds-media__body">
                                            <h2 class="slds-card__header-title slds-card__header-link slds-truncate">
                                                Select Profiles and/or Permission Sets
                                            </h2>
                                        </div>
                                        <div class="slds-no-flex"></div>
                                    </header>
                                </div>
                                <div class="slds-card__body slds-card__body_inner">
                                    <div id="datatable-selection-comparator" />
                                </div>
                            </article>
                        </div>
                        <div class="slds-col slds-size_2-of-12 slds-medium-size_2-of-12 slds-large-size_2-of-12">
                            <article class="slds-card">
                                <div class="slds-card__body slds-card__body_inner">
                                    <br /><br /><br /><br />
                                    <button id="button-compare-cruds" class="slds-button slds-button_stretch slds-button_brand" disabled="disabled">Compare CRUDs... &gt;&gt;</button><br />
                                    <br />
                                    <button id="button-compare-apps" class="slds-button slds-button_stretch slds-button_brand" disabled="disabled">Compare Apps... &gt;&gt;</button><br />
                                    <br />
                                    <br />
                                    <span id="text-selection">0 item selected</span>
                                </div>
                            </article>
                        </div>
                        <div class="slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_6-of-12">
                            <article class="slds-card">
                                <div class="slds-card__header slds-grid">
                                    <header class="slds-media slds-media_center slds-has-flexi-truncate">
                                        <div class="slds-media__figure">
                                            <span class="slds-icon_container slds-icon-standard-quip-sheet" title="Comparison matrix">
                                                <svg class="slds-icon slds-icon_small" aria-hidden="true">
                                                    <use href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#quip_sheet')}"></use>
                                                </svg>
                                                <span class="slds-assistive-text">Comparison matrix</span>
                                            </span>
                                        </div>
                                        <div class="slds-media__body">
                                            <h2 class="slds-card__header-title slds-card__header-link slds-truncate">
                                                Comparison matrix
                                            </h2>
                                        </div>
                                        <div class="slds-no-flex"></div>
                                    </header>
                                </div>
                                <div class="slds-card__body slds-card__body_inner">
                                    <div id="thematrix-comparator" />
                                </div>
                            </article>
                        </div>
                    </div>
                </div>
            </div>
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {

                    // Initialize TABS bindings
                    helper.html.tabs.initialize('slds-tabs_default__item', 'slds-tabs_default__content', 'slds-button');

                    // =================================
                    // RUN CONTROLLER
                    // =================================
                    controller.run({
                        datasets: [ 'profiles', 'permissionSets', 'permissionSetAssignments', 'profilePasswordPolicies', 'settings' ],
                        onRecords: function(map) { 

                            const allProfilesAndPSets = {};
                            const allProfilesByFullname = {};

                            // -------------------------------------------
                            // PROFILES
                            // -------------------------------------------
                            helper.html.datatable.create({
                                element: 'datatable-profiles',
                                appendCountInElement: 'tab-default-profiles__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', formula: (r) => { 
                                        allProfilesAndPSets[r.permissionSetId] = { id: r.permissionSetId, name: r.name + ' (profile)', profileId: r.id, apiName: r.apiName };
                                        allProfilesByFullname[r.apiName.toLowerCase()] = { id: r.id, name: r.name };
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_IsCustom_CL)}', property: 'isCustom', type: 'checkbox' },
                                    { name: '{!JSENCODE($Label.OrgCheck_License_CL)}', property: 'license' },
                                    { name: '{!JSENCODE($Label.OrgCheck_UserType_CL)}', property: 'userType' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Package_CL)}', property: 'package' },
                                    { name: '{!JSENCODE($Label.OrgCheck_NbActiveUsers_CL)}', 
                                        formula: (r) => { 
                                            if (r.isUnusedCustom === true) return '{!JSENCODE($Label.OrgCheck_NoUserForThisProfile_CL)}'; 
                                            if (r.membersCount < 101) return helper.html.render.format('{!JSENCODE($Label.OrgCheck_XUsers_CL)}', r.membersCount);
                                            return '{!JSENCODE($Label.OrgCheck_More100Users_CL)}';
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isUnusedCustom === true) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Description_CL)}', 
                                        formula: (r) => {
                                            if (r.isUndescribedCustom === true) return '{!JSENCODE($Label.OrgCheck_SetADescription_CL)}';
                                            return helper.html.render.escape(helper.html.render.shrinkText(r.description, 100)); ;
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isUndescribedCustom === true) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_CreatedDate_CL)}', type: 'datetime', property: 'createdDate' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ModifiedDate_CL)}', type: 'datetime', property: 'lastModifiedDate' }                                    
                                ],
                                data: map.profiles,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true,
                                stickyHeaders: true
                            });

                            // -------------------------------------------
                            // PROFILE LOGIN RESTRICTIONS
                            // -------------------------------------------
                            helper.html.datatable.create({
                                element: 'datatable-profileLoginHours',
                                appendCountInElement: 'tab-default-loginhours__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Profile_CL)}', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        );
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Monday_CL)}', formula: (r) => { return r.loginHours.monday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.monday.from, r.loginHours.monday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Tuesday_CL)}', formula: (r) => { return r.loginHours.tuesday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.tuesday.from,  r.loginHours.tuesday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Wednesday_CL)}', formula: (r) => { return r.loginHours.wednesday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.wednesday.from,  r.loginHours.wednesday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Thursday_CL)}', formula: (r) => { return r.loginHours.thursday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.thursday.from,  r.loginHours.thursday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Friday_CL)}', formula: (r) => { return r.loginHours.friday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.friday.from, r.loginHours.friday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Saturday_CL)}', formula: (r) => { return r.loginHours.saturday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.saturday.from,  r.loginHours.saturday.to) : '' }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Sunday_CL)}', formula: (r) => { return r.loginHours.sunday ? helper.html.render.format('{!JSENCODE($Label.OrgCheck_XtoY_CL)}', r.loginHours.sunday.from,  r.loginHours.sunday.to) : '' }},
                                ],
                                data: map.profiles,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Profile_CL)}', order: 'asc' },
                                filtering: { formula: (r) => { return r.loginHours ? true : false; }},
                                showSearch: false,
                                showStatistics: false,
                                showLineCount: true,
                                stickyHeaders: true
                            });

                            // -------------------------------------------
                            // PROFILE RANGE IP
                            // -------------------------------------------
                            helper.html.datatable.create({
                                element: 'datatable-profileRangeIPs',
                                appendCountInElement: 'tab-default-ipranges__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Profile_CL)}', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Starts_CL)}', formula: (r) => { 
                                        let html = '';
                                        r.loginIpRanges.forEach(i => html += i.startAddress + '<br />');
                                        return html;
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Ends_CL)}', formula: (r) => { 
                                        let html = '';
                                        r.loginIpRanges.forEach(i => html += i.endAddress + '<br />');
                                        return html;
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Description_CL)}', formula: (r) => { 
                                        let html = '';
                                        r.loginIpRanges.forEach(i => html += helper.html.render.escape(i.description) + '<br />');
                                        return html;
                                    }}
                                ],
                                data: map.profiles,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Profile_CL)}', order: 'asc' },
                                filtering: { formula: (r) => { return r.loginIpRanges && r.loginIpRanges.length > 0 ? true : false; }},
                                showSearch: false,
                                showStatistics: false,
                                showLineCount: true,
                                stickyHeaders: true
                            });

                            // -------------------------------------------
                            // PROFILE PASSWORD POLICIES
                            // -------------------------------------------
                            // Let's add the org level password policy in the table!
                            helper.map.setItem(map.profilePasswordPolicies, '##orgPwdPolicies##', { 
                                isOrgLevel: true,
                                name: 'Org Level',
                                passwordExpiration: map.settings.security.passwordPolicies.expiration,
                                passwordHistory: map.settings.security.passwordPolicies.historyRestriction,
                                minimumPasswordLength: map.settings.security.passwordPolicies.minimumPasswordLength,
                                passwordComplexity: map.settings.security.passwordPolicies.complexity,
                                passwordQuestion: map.settings.security.passwordPolicies.questionRestriction,
                                maxLoginAttempts: map.settings.security.passwordPolicies.maxLoginAttempts,
                                lockoutInterval: map.settings.security.passwordPolicies.lockoutInterval,
                                obscure : map.settings.security.passwordPolicies.obscureSecretAnswer,
                                minimumPasswordLifetime : map.settings.security.passwordPolicies.minimumPasswordLifetime
                            });
                            helper.html.datatable.create({
                                element: 'datatable-pwdPolicies',
                                appendCountInElement: 'tab-default-ppwdpolicies__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: 'Policy', property: 'name',
                                        formula: (r) => {
                                            if (r.isOrgLevel) {
                                                return helper.html.render.icon('org') + ' ' + 
                                                    helper.html.render.link('/lightning/setup/SecurityPolicies/home', 'Org Level');
                                            }
                                            const profile = allProfilesByFullname[r.name?.toLowerCase()];
                                            if (profile) {
                                                return helper.html.render.icon('user') + ' ' + 
                                                    helper.html.render.link('/'+profile.id, helper.html.render.escape(profile.name));
                                            }
                                            return r.name;
                                        }
                                    },
                                    { name: 'User pwd expire in', property: 'passwordExpiration', type: 'numeric',
                                        scoreFormula: (r) => { 
                                            if (r.isOrgLevel) return (r.passwordExpiration > 180) ? 1 : 0; 
                                            if (r.passwordExpiration > map.settings.security.passwordPolicies.expiration) return 1;
                                            if (r.passwordExpiration > 90) return 1; 
                                            if (r.passwordExpiration === 0) return 1; 
                                        }
                                    },
                                    { name: 'Enforce pwd history', property: 'passwordHistory', type: 'numeric',
                                        scoreFormula: (r) => { if (r.passwordHistory < 3) return 1; }
                                    },
                                    { name: 'Min pwd length', property: 'minimumPasswordLength', type: 'numeric',
                                        scoreFormula: (r) => { if (r.minimumPasswordLength < 8) return 1; }
                                    },
                                    { name: 'Level of complexity', property: 'passwordComplexity', type: 'numeric', 
                                        formula: (r) => { return helper.html.render.icon('star'+r.passwordComplexity); },
                                        scoreFormula: (r) => { if (r.passwordComplexity < 3) return 1; }
                                    },
                                    { name: 'Question can contain pwd', property: 'passwordQuestion', 
                                        formula: (r) => { return helper.html.render.checkbox(r.passwordQuestion === 1 ? false : true); },
                                        scoreFormula: (r) => { if (r.passwordQuestion !== 1) return 1; }
                                    },
                                    { name: 'Max Login Attempts', property: 'maxLoginAttempts', type: 'numeric',
                                        formula: (r) => { 
                                            if (r.maxLoginAttempts === undefined) return 'No limit';
                                            return r.maxLoginAttempts + ' attempts';
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.maxLoginAttempts === undefined) return 1; 
                                            if (r.maxLoginAttempts > map.settings.security.passwordPolicies.maxLoginAttempts) return 1;
                                        }
                                    },
                                    { name: 'Lockout effective period', property: 'lockoutInterval', type: 'numeric',
                                        formula: (r) => { 
                                            if (r.lockoutInterval === undefined) return 'Never';
                                            return r.lockoutInterval + ' minutes';
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.lockoutInterval === undefined) return 1; 
                                            if (r.lockoutInterval < map.settings.security.passwordPolicies.lockoutInterval) return 1;
                                        }
                                    },
                                    { name: 'Security Question Hidden', property: 'obscure', type: 'checkbox' },
                                    { name: 'Require min 1 day pwd lifetime', property: 'minimumPasswordLifetime', type: 'checkbox' }
                                ],
                                data: map.profilePasswordPolicies,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                showSearch: false,
                                showStatistics: false,
                                showLineCount: true,
                                stickyHeaders: true
                            });

                            // -------------------------------------------
                            // PERMISSION SETS
                            // -------------------------------------------
                            const assignmentsPerPS = {};
                            helper.map.iterate2(map.permissionSetAssignments, function(p, i, s) {
                                let assignments = assignmentsPerPS[p.permissionSetId];
                                if (!assignments) {
                                    assignments = assignmentsPerPS[p.permissionSetId] = { assignees: [], uniqueProfiles: {} };
                                }
                                assignments.assignees.push(p.assigneeId);
                                if (!assignments.uniqueProfiles[p.assigneeProfileId]) {
                                    assignments.uniqueProfiles[p.assigneeProfileId] = { count: 1 };
                                } else {
                                    assignments.uniqueProfiles[p.assigneeProfileId].count++;
                                }
                            });
                            helper.html.datatable.create({
                                element: 'datatable-permissionSets',
                                appendCountInElement: 'tab-default-permsets__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', 
                                        formula: (r) => { 
                                            if (r.isGroup === false) {
                                                allProfilesAndPSets[r.id] = { id: r.id, name: r.name + ' (permission set)', apiName: r.apiName };
                                            }
                                            return helper.html.render.link(
                                                r.isGroup ? ('/'+r.groupId) : ('/'+r.id), 
                                                helper.html.render.escape(r.name)
                                            ); 
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_IsGroup_CL)}', property: 'isGroup', type: 'checkbox' },
                                    { name: '{!JSENCODE($Label.OrgCheck_IsCustom_CL)}', property: 'isCustom', type: 'checkbox' },
                                    { name: '{!JSENCODE($Label.OrgCheck_License_CL)}', property: 'license' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Package_CL)}', property: 'package' },
                                    { name: '{!JSENCODE($Label.OrgCheck_NbActiveUsers_CL)}', 
                                        formula: (r) => { 
                                            if (r.isUnusedCustom === true) return 'No user for this custom permission set!'; 
                                            const membersCount = assignmentsPerPS[r.id]?.assignees?.length || 0;
                                            if (membersCount < 101) return helper.html.render.format('{!JSENCODE($Label.OrgCheck_XUsers_CL)}', membersCount);                                            
                                            return '{!JSENCODE($Label.OrgCheck_More100Users_CL)}';
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isUnusedCustom === true) return 1;
                                        }
                                    },

                                    { name: '{!JSENCODE($Label.OrgCheck_AssignedUsersProfiles_CL)}', formula: (r) => { 
                                        let html = '';
                                        helper.map.iterate2(assignmentsPerPS[r.id]?.uniqueProfiles, function(v, i, l, pid) {
                                            html += helper.html.render.link(
                                                '/'+pid, 
                                                helper.html.render.escape(map.profiles[pid]?.name)) + ' (' + v.count + ')<br />';
                                        });
                                        return html;
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Description_CL)}', 
                                        formula: (r) => {
                                            if (r.isUndescribedCustom === true) return '{!JSENCODE($Label.OrgCheck_SetADescription_CL)}';
                                            return helper.html.render.escape(helper.html.render.shrinkText(r.description, 100)); ;
                                        },
                                        scoreFormula: (r) => { 
                                            if (r.isUndescribedCustom === true) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_CreatedDate_CL)}', type: 'datetime', property: 'createdDate' },
                                    { name: '{!JSENCODE($Label.OrgCheck_ModifiedDate_CL)}', type: 'datetime', property: 'lastModifiedDate' }                                    
                                ],
                                data: map.permissionSets,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true,
                                stickyHeaders: true
                            });

                            // -------------------------------------------
                            // COMPARATOR
                            // -------------------------------------------
                            let selectedProfileAndPermSetIds = []; // includes also the pset ids paired with profiles!
                            const buttonCruds = helper.html.element.get('button-compare-cruds');
                            const buttonApps = helper.html.element.get('button-compare-apps');
                            const buttons = [ buttonCruds, buttonApps ];
                            const text = helper.html.element.get('text-selection');
                            helper.html.datatable.create({
                                element: 'datatable-selection-comparator',
                                columns: [
                                    { name: 'Name', property: 'name' }
                                ],
                                data: allProfilesAndPSets,
                                sorting: { name: 'Name', order: 'asc' },
                                showSearch: true,
                                showSelection: { 
                                    onselect: (r, v) => {
                                        if (v === true) {
                                            selectedProfileAndPermSetIds.push(r.id);
                                        } else {
                                            selectedProfileAndPermSetIds = selectedProfileAndPermSetIds.filter(e => e !== r.id);
                                        }
                                        helper.html.element.setText(text, selectedProfileAndPermSetIds.length + ' item'+(selectedProfileAndPermSetIds.length>1?'s':'')+' selected.');
                                        if (selectedProfileAndPermSetIds.length === 0) {
                                            buttons.forEach(b => helper.html.element.enable(b, false));
                                        } else {
                                            buttons.forEach(b => helper.html.element.enable(b, true));
                                        }
                                    }
                                },
                                stickyHeaders: true
                            });
                            const paintMatrix = function(type) {
                                helper.html.datatable.clean('thematrix-comparator');
                                switch (type) {
                                    case 'cruds': {
                                        const columns = [ { name: 'Object', property: 'sobject', orientation: 'horizontal-bottom' } ];
                                        selectedProfileAndPermSetIds.forEach(id => { 
                                            columns.push({ name: allProfilesAndPSets[id].name, property: id, orientation: 'vertical' }); 
                                        });
                                        helper.html.progress.resetSections();
                                        helper.html.progress.show();
                                        helper.html.progress.addSection('retrieving', '');
                                        helper.html.progress.setSection('retrieving', 'Retrieving information about object permissions for selected profiles and permission sets...', 'started');
                                        
                                        helper.salesforce.cruds(selectedProfileAndPermSetIds, 
                                            results => { 
                                                helper.html.progress.setSection('retrieving', 'Retrieving done!', 'ended');
                                                const matrixData = {};
                                                results.forEach(r => {
                                                    const d = matrixData[r.objectType] || { sobject: r.objectType };
                                                    d[r.parentId] = 
                                                        (r.isCreate === true ? 'C' : '') +
                                                        (r.isRead === true ? 'R' : '') +
                                                        (r.isEdit === true ? 'U' : '') +
                                                        (r.isDelete === true ? 'D' : '') +
                                                        (r.isViewAll === true ? 'V' : '') +
                                                        (r.isModifyAll === true ? 'M' : '');
                                                    matrixData[r.objectType] = d;
                                                });
                                                helper.html.datatable.create({
                                                    element: 'thematrix-comparator',
                                                    columns: columns,
                                                    data: matrixData,
                                                    sorting: { name: 'Object', order: 'asc' },
                                                    columnBordered: true
                                                });
                                                helper.html.progress.hide();
                                            }, 
                                            error => { 
                                                helper.html.progress.hide();
                                                helper.error.show(error); 
                                            }
                                        );
                                        break;
                                    }
                                    case 'apps': {
                                        const columns = [ { name: 'Application', property: 'app', orientation: 'horizontal-bottom' } ];
                                        const profileFullnames = [];
                                        const permissionSetFullnames = [];
                                        selectedProfileAndPermSetIds.forEach(id => { 
                                            const item = allProfilesAndPSets[id];
                                            (item.profileId ? profileFullnames : permissionSetFullnames).push(item.apiName);
                                            columns.push({ name: item.name, property: item.apiName, orientation: 'vertical' }); 
                                        });
                                        helper.html.progress.resetSections();
                                        helper.html.progress.show();
                                        if (profileFullnames.length > 0) {
                                            helper.html.progress.addSection('retrievingP', '');
                                            helper.html.progress.setSection('retrievingP', 'Retrieving additional information from the Metadata API about profiles (' + profileFullnames + '). It may take a while...', 'started');
                                        }
                                        if (permissionSetFullnames.length > 0) {
                                            helper.html.progress.addSection('retrievingPS', '');
                                            helper.html.progress.setSection('retrievingPS', 'Retrieving additional information from the Metadata API about permission sets (' + permissionSetFullnames + '). It may take a while...', 'started');
                                        }
                                        
                                        helper.salesforce.applicationVisibilities(profileFullnames, permissionSetFullnames,
                                            results => { 
                                                if (profileFullnames.length > 0) {
                                                    helper.html.progress.setSection('retrievingP', 'Retrieving profiles from Metadata API is done! (thank you for your patience)', 'ended');
                                                }
                                                if (permissionSetFullnames.length > 0) {
                                                    helper.html.progress.setSection('retrievingPS', 'Retrieving permission sets from Metadata API is done! (thank you for your patience)', 'ended');
                                                }
                                                const matrixData = {};
                                                results.forEach(r => {
                                                    if (r.appVisibilities.length === 0) {
                                                        console.log(r.parentApiName + ' has no application visibiliy!');
                                                    } else {
                                                        r.appVisibilities.forEach(ap => {
                                                            const d = matrixData[ap.app] || { app: ap.app };
                                                            d[r.parentApiName] = (ap.visible === true ? 'Visible' : '');
                                                            matrixData[ap.app] = d;
                                                        });
                                                    }
                                                });
                                                helper.html.datatable.create({
                                                    element: 'thematrix-comparator',
                                                    columns: columns,
                                                    data: matrixData,
                                                    sorting: { name: 'Application', order: 'asc' },
                                                    columnBordered: true
                                                });
                                                helper.html.progress.hide();
                                            }, 
                                            error => { 
                                                helper.html.progress.hide();
                                                helper.error.show(error); 
                                            }
                                        );
                                        break;
                                    }
                                    default:
                                        break;
                                }
                            };
                            buttonCruds.onclick = function(event) {
                                paintMatrix('cruds');
                            }
                            buttonApps.onclick = function(event) {
                                paintMatrix('apps');
                            }
                        },
                        actions: {  
                            clearCache: { 
                                show: true 
                            },
                            exportTable: [{
                                table: 'datatable-profiles',
                                visibleTab: 'tab-default-profiles__item',
                                filename: 'Profiles'
                            }, {
                                table: 'datatable-permissionSets',
                                visibleTab: 'tab-default-permsets__item',
                                filename: 'PermissionSets'
                            }, {
                                table: 'datatable-profileLoginHours',
                                visibleTab: 'tab-default-loginhours__item',
                                filename: 'LoginHoursRestrictions'
                            }, {
                                table: 'datatable-profileRangeIPs',
                                visibleTab: 'tab-default-ipranges__item',
                                filename: 'IPRangesRestrictions'
                            }, {
                                table: 'thematrix-comparator',
                                visibleTab: 'tab-default-comparator__item',
                                filename: 'CRUD-Comparator'
                            }]
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>