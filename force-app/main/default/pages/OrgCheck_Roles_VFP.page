<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="html_additional_scripttags" />
        <apex:define name="text_page_icon">üêá</apex:define> 
        <apex:define name="text_page_title">{!$Label.OrgCheck_Roles_Title_CL}</apex:define>
        <apex:define name="text_page_subtitle">{!$Label.OrgCheck_Roles_Subtitle_CL}</apex:define>
        <apex:define name="text_page_description">
            <apex:outputText escape="false" value="{!$Label.OrgCheck_Roles_Description1_CL}" />
            <apex:outputText escape="false" value="{!$Label.OrgCheck_Roles_Description2_CL}" />
            <apex:outputText escape="false" value="{!$Label.OrgCheck_Roles_Description3_CL}" />
        </apex:define>
        <apex:define name="html_actions">
            <div class="slds-page-header__control" style="display: block;">
                <button class="slds-button slds-button_icon slds-button_icon-border-filled" title="{!$Label.OrgCheck_ZoomOut_CL}" id="zoom-out-button" aria-controlled-by="tab-default-1">
                    <svg class="slds-button__icon" aria-hidden="true">
                        <use href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#zoomout ')}"></use>
                    </svg>
                    <span class="slds-assistive-text">{!$Label.OrgCheck_ZoomOut_CL}</span>
                </button>
            </div>
            <div class="slds-page-header__control" style="display: block;">
                <button class="slds-button slds-button_icon slds-button_icon-border-filled" title="{!$Label.OrgCheck_Zoom1x1_CL}" id="zoom-reset-button" aria-controlled-by="tab-default-1">
                    <svg class="slds-button__icon" aria-hidden="true">
                        <use href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#sync ')}"></use>
                    </svg>
                    <span class="slds-assistive-text">{!$Label.OrgCheck_Zoom1x1_CL}</span>
                </button>
            </div>
            <div class="slds-page-header__control" style="display: block;">
                <button class="slds-button slds-button_icon slds-button_icon-border-filled" title="{!$Label.OrgCheck_ZoomIn_CL}" id="zoom-in-button" aria-controlled-by="tab-default-1">
                    <svg class="slds-button__icon" aria-hidden="true">
                        <use href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#zoomin')}"></use>
                    </svg>
                    <span class="slds-assistive-text">{!$Label.OrgCheck_ZoomIn_CL}</span>
                </button>
            </div>
        </apex:define>
        <apex:define name="html_content_core">
            <div class="slds-tabs_default">
                <ul class="slds-tabs_default__nav" role="tablist">
                    <li class="slds-tabs_default__item slds-is-active" title="{!$Label.OrgCheck_RoleExplorer_CL}" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-default-1" id="tab-default-explorer__item">{!$Label.OrgCheck_RoleExplorer_CL}</a>
                    </li>
                    <li class="slds-tabs_default__item" title="{!$Label.OrgCheck_RoleListing_CL}" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-2" id="tab-default-table__item">{!$Label.OrgCheck_RoleListing_CL}</a>
                    </li>
                </ul>
                <div id="tab-default-1" class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-default-explorer__item">
                    <div class="slds-scrollable">
                        <div id="chart-container" name="chart-container" />
                    </div>
                </div>
                <div id="tab-default-2" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-table__item">
                    <div id="datatable" />
                </div>
            </div>
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {

                    const PREF_FILTER_EXTERNAL_ROLES = helper.preferences.get('filter.HideExternalRoles');

                    // =================================
                    // ZOOM METHODS
                    // =================================
                    let currenZoom = 100;
                    const zoomOut = function() {
                        if (currenZoom == 50) return;
                        currenZoom -= 50;
                        helper.html.element.get('chart-container').style.width = currenZoom + '%';
                    }
                    const zoomReset = function() {
                        currenZoom = 100;
                        helper.html.element.get('chart-container').style.width = currenZoom + '%';
                    }
                    const zoomIn = function() {
                        if (currenZoom == 1500) return;
                        currenZoom += 50;
                        helper.html.element.get('chart-container').style.width = currenZoom + '%';
                    }
                    helper.html.element.get('zoom-out-button').onclick = function(event) { zoomOut(); }
                    helper.html.element.get('zoom-reset-button').onclick = function(event) { zoomReset(); }
                    helper.html.element.get('zoom-in-button').onclick = function(event) { zoomIn(); }

                    // Initialize TABS bindings
                    helper.html.tabs.initialize('slds-tabs_default__item', 'slds-tabs_default__content', 'slds-button');
                    
                    // ==================================
                    // COMPUTE GRAPHIC FOR ROLES
                    // ==================================
                    const computeGraph = function(roles_map, node_click) {
                        
                        // Some constants
                        const BOX_PADDING = 3;
                        const BOX_HEIGHT = 24;
                        const BOX_WIDTH = 100;
                        const NOTIF_HEIGHT = 8;
                        const NOTIF_WIDTH = 12;
                        
                        // Stratify the roles into a hierarchy structure
                        const keys = helper.map.keys(roles_map);
                        const root = d3.stratify()
                            .id(d => roles_map[d].id)
                            .parentId(d => roles_map[d].parentId)
                            (keys);
                        
                        // Set size
                        let mdepth = 0;
                        root.each(function(d) {
                            if (mdepth < d.depth) mdepth = d.depth;
                        });
                        const width = BOX_WIDTH * (mdepth * 2 + 4);
                        root.dx = BOX_HEIGHT + BOX_PADDING;
                        root.dy = width / (root.height + 1);
                        
                        // Generate tree
                        const tree = d3.tree().nodeSize([root.dx, root.dy])(root);
                        
                        // Define x0 and x1
                        let x0 = Infinity;
                        let x1 = -x0;
                        root.each(function(d) {
                            if (d.x > x1) x1 = d.x;
                            if (d.x < x0) x0 = d.x;
                            if (mdepth < d.depth) mdepth = d.depth;
                        });

                        // Show alert about too many number of levels in the hierarchy
                        const MAX_LEVEL_DEPTH_ROLES = 7;
                        if (mdepth > MAX_LEVEL_DEPTH_ROLES) {
                            const html = helper.html.render.format('{!JSENCODE($Label.OrgCheck_TooManyRoles_CL)}', MAX_LEVEL_DEPTH_ROLES, mdepth);
                            //helper.html.modal.show('{!JSENCODE($Label.OrgCheck_TooManyLevels_CL)}', html);
                            helper.html.message.show(html);
                        }
                        
                        // Set some attributes that we use to render each nodes
                        root.each(function(d) {
                            const nodeData = roles_map[d.data];
                            d.active_show_notif = false;
                            d.inactive_show_notif = false;
                            if (!d.parent) {
                                // 'I am root...'
                                d.popup_background_color = helper.html.render.color('light-gray');
                                d.clickable = false;
                            } else if (nodeData) {
                                const activeCount = nodeData.activeMembersCount;
                                d.active_count = activeCount;
                                d.clickable = true;
                                if (activeCount > 0) {
                                    d.popup_background_color = helper.html.render.color('blue');
                                    d.active_background_color = helper.html.render.color('dark-blue');
                                    if (activeCount > 100) {
                                        d.active_count = '99+';
                                    }
                                    d.active_show_notif = true;
                                } else {
                                    d.popup_background_color = helper.html.render.color('orange');
                                    d.active_background_color = helper.html.render.color('dark-orange');
                                }
                                const inactiveCount = nodeData.inactiveMembersCount;
                                d.inactive_count = inactiveCount;
                                if (inactiveCount > 0) {
                                    d.inactive_background_color = helper.html.render.color('light-gray');
                                    if (inactiveCount > 100) {
                                        d.inactive_count = '99+';
                                    }
                                    d.inactive_show_notif = true;
                                } else {
                                    d.inactive_background_color = helper.html.render.color('gray');
                                }
                            }
                        });
                        
                        // Construction of graph
                        const svg = d3.create('svg')
                            .attr('viewBox', [0, 0, width, x1 - x0 + root.dx * 2]);
                        
                        const g = svg.append('g')
                            .attr('font-family', 'Salesforce Sans,Arial,sans-serif')
                            .attr('font-size', '6')
                            .attr('transform', `translate(${root.dy / 2},${root.dx - x0})`);
                        
                        const link = g.append('g')
                            .attr('fill', 'none')
                            .attr('stroke', '#555')
                            .attr('stroke-opacity', 0.4)
                            .attr('stroke-width', 1.5)
                            .selectAll('path')
                            .data(root.links())
                            .join('path')
                            .attr('d', d3.linkHorizontal()
                                  .x(function(d) { return d.y; } )
                                  .y(function(d) { return d.x; } )
                                 );
                        
                        const node = g.append('g')
                            .attr('stroke-linejoin', 'round')
                            .attr('stroke-width', 3)
                            .attr("cursor", "pointer")
                            .selectAll('g')
                            .data(root.descendants())
                            .join('g')
                            .attr('transform', function(d) { return `translate(${d.y},${d.x})`; });
                        
                        // --------------------------------
                        // NODE ZONE
                        // --------------------------------
                        node.append('rect')
                            .attr('fill', function(d) { return d.popup_background_color; })
                            .attr('rx', 6)
                            .attr('ry', 6)
                            .attr('x', 0)
                            .attr('y', - BOX_HEIGHT / 2)
                            .attr('width', BOX_WIDTH)
                            .attr('height', BOX_HEIGHT)
                            .on('click', function(d) { node_click(roles_map, d); });
                        
                        // --------------------------------
                        // NOTIFICATION ZONE - ACTIVE USERS
                        // --------------------------------
                        node.filter(function(d) { return d.active_show_notif === true; })
                            .append('rect')
                            .attr('fill', function(d) { return d.active_background_color; })
                            .attr('rx', 4)
                            .attr('ry', 4)
                            .attr('x', BOX_WIDTH - NOTIF_WIDTH + 2)
                            .attr('y', - BOX_HEIGHT / 2 - 4)
                            .attr('width', NOTIF_WIDTH)
                            .attr('height', NOTIF_HEIGHT)
                            .on('click', function(d) { node_click(roles_map, d); });
                        
                        // --------------------------------
                        // NOTIFICATION ZONE - INACTIVE USERS
                        // --------------------------------
                        node.filter(function(d) { return d.inactive_show_notif === true; })
                            .append('rect')
                            .attr('fill', function(d) { return d.inactive_background_color; })
                            .attr('rx', 4)
                            .attr('ry', 4)
                            .attr('x', BOX_WIDTH - 2*NOTIF_WIDTH + 2)
                            .attr('y', - BOX_HEIGHT / 2 - 4)
                            .attr('width', NOTIF_WIDTH)
                            .attr('height', NOTIF_HEIGHT)
                            .on('click', function(d) { node_click(roles_map, d); });

                        // --------------------------------
                        // LEVEL ZONE
                        // --------------------------------
                        node.filter(function(d) { return d.depth > 0; })
                            .append('foreignObject')
                            .attr('x', -25)
                            .attr('y', -7)
                            .attr('width', NOTIF_WIDTH + 35)
                            .attr('height', NOTIF_HEIGHT)
                            .append('xhtml').html(function(d) { return 'Level #' + d.depth; });

                        // --------------------------------
                        // NODE CONTENT
                        // --------------------------------
                        node.append('foreignObject')
                            .attr('x', BOX_PADDING)
                            .attr('y', - BOX_HEIGHT / 2 + BOX_PADDING)
                            .attr('width', BOX_WIDTH-2*BOX_PADDING)
                            .attr('height', BOX_HEIGHT-2*BOX_PADDING)
                            .on('click', function(d) { node_click(roles_map, d); })
                            .append('xhtml').html(function(d) {
                                let html = '<center>';
                                if (roles_map[d.data]) { 
                                    if (roles_map[d.data].name) html += '<b>' + helper.html.render.escape(roles_map[d.data].name) + '</b><br />';
                                    if (roles_map[d.data].developerName) html += '<i>' + helper.html.render.escape(roles_map[d.data].developerName) + '</i>'; 
                                }
                                html += '</center>';
                                return html;
                            });
                        
                        // --------------------------------
                        // NOTIFICATION CONTENT - ACTIVE USERS
                        // --------------------------------
                        node.filter(function(d) { return d.active_show_notif === true; })
                            .append('foreignObject')
                            .attr('x', BOX_WIDTH - NOTIF_WIDTH + 2)
                            .attr('y', - BOX_HEIGHT / 2 - 5)
                            .attr('width', NOTIF_WIDTH)
                            .attr('height', NOTIF_HEIGHT)
                            .on('click', function(d) { node_click(map, d); })
                            .append('xhtml').html(function(d) { return '<center>' + d.active_count + '</center>'; });
                        
                        // --------------------------------
                        // NOTIFICATION CONTENT - INACTIVE USERS
                        // --------------------------------
                        node.filter(function(d) { return d.inactive_show_notif === true; })
                            .append('foreignObject')
                            .attr('x', BOX_WIDTH - 2*NOTIF_WIDTH + 2)
                            .attr('y', - BOX_HEIGHT / 2 - 5)
                            .attr('width', NOTIF_WIDTH)
                            .attr('height', NOTIF_HEIGHT)
                            .on('click', function(d) { node_click(map, d); })
                            .append('xhtml').html(function(d) { return '<center>' + d.inactive_count + '</center>'; });

                        return svg.node();
                    }

                    // =================================
                    // NODE SELECTION
                    // =================================
                    let nodeOnClick = function(roles_map, d) {

                        const node = d.currentTarget.__data__;
                        if (!node.clickable) return;

                        let html = '';
                        html += 'Role Name: <b>'+helper.html.render.link('/'+node.id, helper.html.render.escape(roles_map[node.data].name)) + '</b><br />';
                        html += 'Salesforce Id: <b>'+node.id+'</b><br />';
                        if (roles_map[node.data].developerName) {
                            html += 'Developer Name: <b>'+helper.html.render.escape(roles_map[node.data].developerName)+'</b><br />';
                        }
                        html += '<br />';
                        html += 'Level in hierarchy: '+ node.depth +'<br />';
                        html += '<br />';
                        if (roles_map[node.data].hasActiveMembers === true) {
                            html += 'This role has '+roles_map[node.data].activeMembersCount+' active user'+(roles_map[node.data].activeMembersCount>1?'s':'')+'<br />';
                            html += '<ul class="slds-list_dotted">';
                            for (let i=0; i<roles_map[node.data].activeMembersCount; i++) {
                                let member = roles_map[node.data].activeMembers[i];
                                html += '<li>';
                                html += '<img src="'+helper.html.render.escape(member.photourl)+'" width="25" />&nbsp;&nbsp;';
                                html += '<b><a href="/'+member.id+'" target="_blank" rel="external noopener noreferrer">'+helper.html.render.escape(member.name)+'</a></b>';
                                html += '</li>';
                            }
                            html += '</ul>';
                        } else {
                            html += 'This role has 0 active user.<br />';
                        }
                        html += '<br />';
                        if (roles_map[node.data].hasInactiveMembers === true) {
                            html += 'This role has '+roles_map[node.data].inactiveMembersCount+' inactive user'+(roles_map[node.data].inactiveMembersCount>1?'s':'')+'<br />';
                        } else {
                            html += 'This role has 0 inactive user.<br />';
                        }
                        html += '<br />';
                        if (node.parent) {
                            html += 'Parent Role: <b>'+helper.html.render.link('/'+roles_map[node.parent.data].id, helper.html.render.escape(roles_map[node.parent.data].name)) + '</a></b><br />';
                            html += 'Parent Salesforce Id: <b>'+roles_map[node.parent.data].id+'</b><br />';
                            if (roles_map[node.parent.data].developerName) {
                                html += '{!JSENCODE($Label.OrgCheck_ParentDevName_CL)}: <b>'+helper.html.render.escape(roles_map[node.parent.data].developerName)+'</b><br />';
                            }
                        }
                        helper.html.modal.show('Full information about this role', html);
                    };
                    
                    // =================================
                    // RUN CONTROLLER
                    // =================================
                    controller.run({
                        datasets: [ 'roles' ],
                        onRecords: function(map) { 

                            if (PREF_FILTER_EXTERNAL_ROLES === true) {
                                helper.map.iterate2(map.roles, function(d, i, s, k) {
                                    if (d.isExternal === true) delete map.roles[k];
                                });
                            }

                            helper.html.datatable.create({
                                element: 'datatable',
                                appendCountInElement: 'tab-default-table__item',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', formula: (r) => { 
                                        return helper.html.render.link(
                                            '/'+r.id, 
                                            helper.html.render.escape(r.name)
                                        ); 
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', type: 'numeric', property: '##score##' },
                                    { name: '{!JSENCODE($Label.OrgCheck_DeveloperName_CL)}', property: 'developerName' },
                                    { name: '{!JSENCODE($Label.OrgCheck_NbActiveMembers_CL)}', type: 'numeric', 
                                        formula: (r) => {
                                            if (r.hasActiveMembers == false) return '{!JSENCODE($Label.OrgCheck_NoActiveMember_CL)}';   
                                            if (r.activeMembersCount == 1) return '{!JSENCODE($Label.OrgCheck_OneActiveMember_CL)}';
                                            return helper.html.render.format('{!JSENCODE($Label.OrgCheck_XActiveMembers_CL)}', r.activeMembersCount);
                                        },
                                        scoreFormula: (r) => {
                                            if (r.hasActiveMembers == false) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_NbInactiveMembers_CL)}', type: 'numeric', 
                                        formula: (r) => {
                                            if (r.hasInactiveMembers === false) return '{!JSENCODE($Label.OrgCheck_NoInactiveMember_CL)}';
                                            if (r.inactiveMembersCount == 1) return '{!JSENCODE($Label.OrgCheck_OneInactiveMember_CL)}';
                                            return helper.html.render.format('{!JSENCODE($Label.OrgCheck_XInactiveMembers_CL)}', r.inactiveMembersCount);
                                            ;                                
                                        },
                                        scoreFormula: (r) => {
                                            if (r.hasInactiveMembers === true) return 1;
                                        }
                                    },
                                    { name: '{!JSENCODE($Label.OrgCheck_Parent_CL)}', formula: (r) => { 
                                        if (r.hasParent === true) {
                                            const parent = map.roles[r.parentId];
                                            return helper.html.render.link(
                                                '/'+parent.id, 
                                                helper.html.render.escape(parent.name)
                                            );
                                        }
                                        return '{!JSENCODE($Label.OrgCheck_NoParent_CL)}';
                                    }},
                                    { name: '{!JSENCODE($Label.OrgCheck_ParentDevName_CL)}', formula: (r) => { 
                                        if (r.hasParent === true) {
                                            const parent = map.roles[r.parentId];
                                            return helper.html.render.escape(parent.developerName);
                                        }
                                        return '';
                                    }}
                                ],
                                data: map.roles,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Score_CL)}', order: 'desc' },
                                filtering: { formula: (r) => { 
                                    if (r.developerName === '###root###') return false;
                                }},
                                showSearch: true,
                                showStatistics: true,
                                showLineCount: true,
                                stickyHeaders: true
                            });
                            
                            // Render role graphic
                            const graphSvg = computeGraph(map.roles, nodeOnClick);
                            let container = helper.html.element.get('chart-container');
                            container.innerHTML = '';
                            container.appendChild(graphSvg);

                        },
                        actions: {  
                            exportTable: [{
                                visibleTab: 'tab-default-table__item',
                                table: 'datatable',
                                filename: 'Roles'
                            }],
                            clearCache: { 
                                show: true 
                            }
                        }
                    });
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>