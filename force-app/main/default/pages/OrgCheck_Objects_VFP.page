<apex:page >
    <apex:composition template="OrgCheck_PageTemplate_VFT">
        <apex:define name="html_additional_scripttags" />
        <apex:define name="text_page_icon">âš½</apex:define> 
        <apex:define name="text_page_title">{!$Label.OrgCheck_Objects_Title_CL}</apex:define>
        <apex:define name="text_page_subtitle">{!$Label.OrgCheck_Objects_Subtitle_CL}</apex:define>
        <apex:define name="text_page_description">
            <apex:outputText escape="false" value="{!$Label.OrgCheck_Objects_Description_CL}" />
        </apex:define>
        <apex:define name="html_actions">
        </apex:define>
        <apex:define name="html_content_core">
            <div class="slds-tabs_default">
                <ul class="slds-tabs_default__nav" role="tablist">
                    <li class="slds-tabs_default__item slds-is-active" title="Object Documentation" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-default-1" id="tab-default-objectdoc__item">Object Documentation</a>
                    </li>
                    <li class="slds-tabs_default__item" title="Org Wide Default" role="presentation">
                        <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-2" id="tab-default-owd__item">Org Wide Default</a>
                    </li>
                </ul>
                <div id="tab-default-1" class="slds-tabs_default__content slds-show" style="padding-top: 0;" role="tabpanel" aria-labelledby="tab-default-objectdoc__item">
                    <div class="slds-grid slds-border_bottom slds-theme_shade">
                        <h1 class="slds-text-heading--small" style="padding-top: 5px;">{!$Label.OrgCheck_WhichEntity_CL}</h1>
                        <div class="slds-col_bump-left slds-form">
                            <div class="slds-form__row">
                                <div class="slds-form__item">
                                    <div class="slds-form-element__control">
                                        <div class="slds-select_container">
                                            <select class="slds-select" id="object-type">
                                                <option value="ALL">{!$Label.OrgCheck_AllTypes_CL}</option>
                                                <option value="STANDARD_SOBJECTS">{!$Label.OrgCheck_StandardObjects_CL}</option>
                                                <option value="CUSTOM_SOBJECTS">{!$Label.OrgCheck_CustomObjects_CL}</option>
                                                <option value="CUSTOM_EXTERNAL_SOBJECTS">{!$Label.OrgCheck_ExternalObjects_CL}</option>
                                                <option value="CUSTOM_SETTINGS">{!$Label.OrgCheck_CustomSettings_CL}</option>
                                                <option value="CUSTOM_METADATA_TYPES">{!$Label.OrgCheck_CustomMetadataTypes_CL}</option>
                                                <option value="CUSTOM_EVENTS">Platform Events</option>
                                                <option value="KNOWLEDGE_ARTICLES">Knowledge Articles</option>
                                                <option value="CUSTOM_BIG_OBJECTS">Big Objects</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-form__item">
                                    <div class="slds-form-element__control">
                                        <div class="slds-select_container">
                                            <select class="slds-select" id="object-namespace">
                                                <option value="EMPTY">{!$Label.OrgCheck_SelectPackage_CL}</option>
                                                <option value="NO_PACKAGE">{!$Label.OrgCheck_NoPackage_CL}</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-form__item">
                                    <div class="slds-form-element__control">
                                        <div class="slds-select_container">
                                            <select class="slds-select" id="object-api-name">
                                                <option value="EMPTY">{!$Label.OrgCheck_SelectObject_CL}</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
        
                    <!-- GENERAL SECTION -->
                    <div id="section-general">
                        <h1 class="slds-text-heading--small">{!$Label.OrgCheck_GeneralInformation_CL}</h1>
                        <div id="datatable-general" data-title="{!$Label.OrgCheck_GeneralInformation_CL}" />
                    </div>

                    <!-- APEX TRIGGER SECTION -->
                    <div id="section-apexTriggers">
                        <h1 class="slds-text-heading--small">{!$Label.OrgCheck_ApexTriggers_CL}</h1>
                        <div id="datatable-apexTriggers" data-title="{!$Label.OrgCheck_ApexTriggers_CL}" />
                    </div>
                    
                    <!-- FIELD SETS SECTION -->
                    <div id="section-fieldSets">
                        <h1 class="slds-text-heading--small">{!$Label.OrgCheck_FieldSets_CL}</h1>
                        <div id="datatable-fieldSets" data-title="{!$Label.OrgCheck_FieldSets_CL}" />
                    </div>
                        
                    <!-- LAYOUTS SECTION -->
                    <div id="section-layouts">
                        <h1 class="slds-text-heading--small">{!$Label.OrgCheck_PageLayouts_CL}</h1>
                        <div id="datatable-layouts" data-title="{!$Label.OrgCheck_PageLayouts_CL}" />
                    </div>
                    
                    <!-- LIMITS SECTION -->
                    <div id="section-limits">
                        <h1 class="slds-text-heading--small">{!$Label.OrgCheck_Limits_CL}</h1>
                        <div id="datatable-limits" data-title="{!$Label.OrgCheck_Limits_CL}" />
                    </div>
                    
                    <!-- VALIDATION RULES SECTION -->
                    <div id="section-validationRules">
                        <h1 class="slds-text-heading--small">{!$Label.OrgCheck_ValidationRules_CL}</h1>
                        <div id="datatable-validationRules" data-title="{!$Label.OrgCheck_ValidationRules_CL}" />
                    </div>
                    
                    <!-- WEB LINKS SECTION -->
                    <div id="section-webLinks">
                        <h1 class="slds-text-heading--small">{!$Label.OrgCheck_WebLinks_CL}</h1>
                        <div id="datatable-webLinks" data-title="{!$Label.OrgCheck_WebLinks_CL}" />
                    </div>
                    
                    <!-- FIELDS SECTION -->
                    <div id="section-fields">
                        <h1 class="slds-text-heading--small">{!$Label.OrgCheck_Fields_CL}</h1>
                        <i>{!$Label.OrgCheck_FieldsNote_CL}</i>
                        <div id="datatable-fields" data-title="{!$Label.OrgCheck_Fields_CL}" />
                    </div>
                    
                    <!-- RECORD TYPES SECTION -->
                    <div id="section-recordtypes">
                        <h1 class="slds-text-heading--small">{!$Label.OrgCheck_RecordTypes_CL}</h1>
                        <div id="datatable-recordtypes" data-title="{!$Label.OrgCheck_RecordTypes_CL}" />
                    </div>
                    
                    <!-- RELEATIONSHIPS SECTION -->
                    <div id="section-relationships">
                        <h1 class="slds-text-heading--small">{!$Label.OrgCheck_Relationships_CL}</h1>
                        <div id="datatable-relationships" data-title="{!$Label.OrgCheck_Relationships_CL}" />
                    </div>
                </div>
                <div id="tab-default-2" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-default-owd__item">
                    <div id="datatable-orgWideDefaults" />
                </div>
            </div>
        </apex:define>
        <apex:define name="html_start_definition_script">
            <script>
                function start2(controller, helper) {

                    // Initialize TABS bindings
                    helper.html.tabs.initialize('slds-tabs_default__item', 'slds-tabs_default__content', 'slds-button');

                    // =================================
                    // Reset the information in the page
                    // =================================
                    const initPage = function() {
                        helper.html.element.show('section-general', false);          helper.html.datatable.clean('datatable-general');
                        helper.html.element.show('section-apexTriggers', false);     helper.html.datatable.clean('datatable-apexTriggers');
                        helper.html.element.show('section-fieldSets', false);        helper.html.datatable.clean('datatable-fieldSets');
                        helper.html.element.show('section-layouts', false);          helper.html.datatable.clean('datatable-layouts');
                        helper.html.element.show('section-limits', false);           helper.html.datatable.clean('datatable-limits');
                        helper.html.element.show('section-validationRules', false);  helper.html.datatable.clean('datatable-validationRules');
                        helper.html.element.show('section-webLinks', false);         helper.html.datatable.clean('datatable-webLinks');                        
                        helper.html.element.show('section-fields', false);           helper.html.datatable.clean('datatable-fields');
                        helper.html.element.show('section-relationships', false);    helper.html.datatable.clean('datatable-relationships');
                        helper.html.element.show('section-recordtypes', false);      helper.html.datatable.clean('datatable-recordtypes');
                    }

                    // =================================
                    // Init the drop down to select the object
                    // =================================
                    const initDropDown = function(namespace, type) {

                        if (namespace === 'EMPTY') namespace = null;
                        else if (namespace === 'NO_PACKAGE') namespace = '';

                        // Get the reference of the select form
                        const select = helper.html.element.get('object-api-name');
                        
                        // Remove previous options (except the first two which is the blank one)
                        helper.html.picklist.clear(select, 2);

                        let countElementsInSelect = 0;
                        if (namespace || namespace === '') {

                            // Get an index of the objects using the specific compare function
                            const indexesObjects = helper.map.index(allObjects, function compare(a, b) {
                                if (a.label < b.label) return -1;
                                if (a.label > b.label) return 1;
                                return 0;
                            });

                            helper.map.iterate(allObjects, indexesObjects, function(d, i, s) {
                                if (d.package !== namespace) return;
                                if (type !== 'ALL') {
                                    if (type === 'CUSTOM_SOBJECTS' && d.isCustomObject === false) return;
                                    if (type === 'STANDARD_SOBJECTS' && d.isStandardObject === false) return;
                                    if (type === 'CUSTOM_EXTERNAL_SOBJECTS' && d.isExternalObject === false) return;
                                    if (type === 'CUSTOM_SETTINGS' && d.isCustomSetting === false) return;
                                    if (type === 'CUSTOM_METADATA_TYPES' && d.isCustomMetadataType === false) return;
                                    if (type === 'CUSTOM_EVENTS' && d.isPlatformEvent === false) return;
                                    if (type === 'KNOWLEDGE_ARTICLES' && d.isKnowledgeArticle === false) return;
                                    if (type === 'CUSTOM_BIG_OBJECTS' && d.isBigObject === false) return;
                                }
                                //if (d.isStandardObject === true && d.triggerable === false) return;
                                if (d.customizable === false) return;
                                helper.html.picklist.addValue(select, d.developerName, d.label + ' (api=' + d.developerName + ')');
                                countElementsInSelect++;
                            });
                        }

                        helper.html.message.hide();
                        if ((namespace || namespace === '') && type && countElementsInSelect === 0) {
                            const labelType = (type === 'STANDARD_SOBJECTS' ? '{!JSENCODE($Label.OrgCheck_StandardObjects_CL)}' :
                                              (type === 'CUSTOM_SOBJECTS' ? '{!JSENCODE($Label.OrgCheck_CustomObjects_CL)}' :
                                              (type === 'CUSTOM_EXTERNAL_SOBJECTS' ? '{!JSENCODE($Label.OrgCheck_ExternalObjects_CL)}' :
                                              (type === 'CUSTOM_SETTINGS' ? '{!JSENCODE($Label.OrgCheck_CustomSettings_CL)}' :
                                              (type === 'CUSTOM_METADATA_TYPES' ? '{!JSENCODE($Label.OrgCheck_CustomMetadataTypes_CL)}' : 
                                              (type === 'CUSTOM_EVENTS' ? '{!JSENCODE($Label.OrgCheck_PlatformEvents_CL)}' :
                                              (type === 'KNOWLEDGE_ARTICLES' ? '{!JSENCODE($Label.OrgCheck_KnowledgeArticles_CL)}' :
                                              (type === 'CUSTOM_BIG_OBJECTS' ? '{!JSENCODE($Label.OrgCheck_BigObjects_CL)}' : '{!JSENCODE($Label.OrgCheck_AllTypes_CL)}'))))))));
                            const html = helper.html.render.format('{!JSENCODE($Label.OrgCheck_NoObjectWarning_CL)}', (namespace !== '' ? namespace : '{!JSENCODE($Label.OrgCheck_None_CL)}'), labelType);
                            helper.html.message.show(html);
                        }
                    }

                    // All objects
                    let allObjects = {};

                    // =================================
                    // Describe the selected object
                    // =================================
                    let describeObject = function(packageName, objectName) {
                        
                        helper.html.progress.resetSections();
                        helper.html.progress.show();
                        helper.html.progress.addSection('describing', 
                            'Looking for the description of the object ' + objectName + ' '+
                            '(' + (packageName===''?'No Package':('Package: ' + packageName + ')')) + ')...');

                        helper.salesforce.describe.object(
                            packageName, 
                            objectName, 
                            function(object) {

                                helper.html.progress.setSection('describing', 'Describing done!', 'ended');

                                const MAX_STEPS = 10;
                                let currentStep = 0;

                                // -------------------------
                                // GLOBAL INFORMATION
                                // -------------------------
                                helper.html.element.show('section-general', true);
                                helper.html.datatable.create({
                                    element: 'datatable-general',
                                    columns: [
                                        { name: '{!JSENCODE($Label.OrgCheck_Label_CL)}', property: 'key' },
                                        { name: '{!JSENCODE($Label.OrgCheck_Value_CL)}', formula: (r) => { 
                                            if (r.type === 'checkbox') {
                                                return helper.html.render.checkbox(r.value);
                                            }
                                            if (r.type === 'number') {
                                                r.value = '' + r.value; // in case 0 we want to display it!
                                            }
                                            return helper.html.render.escape(r.value);
                                        }}
                                    ],
                                    data: [
                                        { key: 'API Name', value: object.name },
                                        { key: 'Singular Label', value: object.label },
                                        { key: 'Plural Label ', value: object.labelPlural },
                                        { key: 'Is Custom?', value: object.custom, type: 'checkbox' },
                                        { key: 'Key Prefix', value: object.keyPrefix },
                                        { key: 'Feed Enable?', value: object.feedEnabled, type: 'checkbox' },
                                        { key: 'Most Recent Enabled?', value: object.mruEnabled, type: 'checkbox' },
                                        { key: 'Global Search Enabled?', value: object.searchable, type: 'checkbox' },
                                        { key: 'Record Count (including deleted ones)', value: object.recordCount, type: 'number' },
                                        { key: 'Internal Sharing', value: object.internalSharingModel },
                                        { key: 'External Sharing', value: object.externalSharingModel },
                                        { key: '{!JSENCODE($Label.OrgCheck_Description_CL)}', value: object.description }
                                    ],
                                    showSearch: false
                                });

                                // -------------------------
                                // FIELDS INFORMATION
                                // -------------------------
                                if (object.fields && object.fields.length > 0) {
                                    helper.html.element.show('section-fields', true);
                                    helper.html.datatable.create({
                                        element: 'datatable-fields',
                                        preprocessing: (r) => {
                                            // If field is standard then we already know that we won't have any dependency (DAPI only for custom fields!!)
                                            if (r.custom === false) return;
                                            // If for some reason object does not have the property "fieldDependencies" there is no dependency to show as well
                                            if (!object.fieldDependencies) return;
                                            // If for some reason current field has not id there is no dependency to show as well
                                            if (!r.id) return;
                                            // ELSE do your thing!!
                                            return helper.html.render.dependencyUsage(r.id, object.fieldDependencies[r.id], ['Layout', 'ApexClass', 'Flow']);
                                        },
                                        columns: [
                                            { name: '{!JSENCODE($Label.OrgCheck_Label_CL)}', formula: (r) => { 
                                                return helper.html.render.link(
                                                    '/lightning/setup/ObjectManager/'+
                                                    (object.id ? object.id : helper.html.render.escape(object.name))+
                                                    '/FieldsAndRelationships/'+
                                                    (r.id ? r.id : helper.html.render.escape(r.name))+
                                                    '/view', 
                                                    helper.html.render.escape(r.label)); 
                                            }},
                                            { name: '{!JSENCODE($Label.OrgCheck_IsCustom_CL)}', property: 'custom', type: 'checkbox' },
                                            { name: '{!JSENCODE($Label.OrgCheck_FullApiName_CL)}', property: 'name' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Using_CL)}', type: 'numeric', formula: (r, pr) => { 
                                                if (!pr) return;
                                                if (pr.usingAllCount > 0) return helper.html.render.checkbox(true) + ' ' + pr.usingAllCount;
                                                return helper.html.render.checkbox(false);
                                            }},
                                            { name: '{!JSENCODE($Label.OrgCheck_UsedIn_CL)}', type: 'numeric', formula: (r, pr) => { 
                                                    if (!pr) return;
                                                    if (pr.usedAllCount > 0) return helper.html.render.checkbox(true) + ' ' + pr.usedAllCount;
                                                    return helper.html.render.checkbox(false) + ' Not used!';
                                                },
                                                scoreFormula: (r, pr) => { if (pr?.usedAllCount === 0) return 1; }
                                            },
                                            { name: '{!JSENCODE($Label.OrgCheck_UsedInLayout_CL)}', type: 'numeric', formula: (r, pr) => { 
                                                if (!pr) return;
                                                if (pr.usedLayoutCount > 0) return helper.html.render.checkbox(true) + ' ' + pr.usedLayoutCount + ' Layout' + (pr.usedLayoutCount>1?'s':'');
                                                return helper.html.render.checkbox(false);
                                            }},
                                            { name: '{!JSENCODE($Label.OrgCheck_UsedInApClass_CL)}', type: 'numeric', formula: (r, pr) => { 
                                                if (!pr) return;
                                                if (pr.usedApexClassCount > 0) return helper.html.render.checkbox(true) + ' ' + pr.usedApexClassCount + ' Apex Class' + (pr.usedApexClassCount>1?'es':'');
                                                return helper.html.render.checkbox(false);
                                            }},
                                            { name: '{!JSENCODE($Label.OrgCheck_UsedInFlow_CL)}', type: 'numeric', formula: (r, pr) => { 
                                                if (!pr) return;
                                                if (pr.usedFlowCount > 0) return helper.html.render.checkbox(true) + ' ' + pr.usedFlowCount + ' Flow' + (pr.usedFlowCount>1?'s':'');
                                                return helper.html.render.checkbox(false);
                                            }},
                                            { name: '{!JSENCODE($Label.OrgCheck_UsedInInactiveFlow_CL)}', type: 'numeric', formula: (r, pr) => { 
                                                    if (!pr) return;
                                                    if (pr.usedFlowInactiveCount > 0) return helper.html.render.checkbox(true) + ' ' + pr.usedFlowInactiveCount + ' Flow' + (pr.usedFlowInactiveCount>1?'s':'');
                                                    return helper.html.render.checkbox(false);
                                                },
                                                scoreFormula: (r, pr) => { if (pr?.usedFlowInactiveCount > 0) return 1; }
                                            },
                                            { name: '{!JSENCODE($Label.OrgCheck_Dependencies_CL)}', 
                                                formula: (r, pr) => { 
                                                    // If field is standard, show nothing
                                                    if (r.custom === false) return;
                                                    // If field is custom and we have some dependencies information for the entire object
                                                    if (object.fieldDependencies) {
                                                        // get dependencies for this field
                                                        const dep = object.fieldDependencies[r.id]; 
                                                        // If this field has depedencies
                                                        if (dep) return helper.html.render.dependencies(r.id, r.name, dep);
                                                    }
                                                    // Any other case we show "No dependencies"
                                                    return '{!JSENCODE($Label.OrgCheck_NoDependency_CL)}';
                                                }
                                            },
                                            { name: '{!JSENCODE($Label.OrgCheck_Tooltips_CL)}', property: 'inlineHelpText' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Type_CL)}', formula: (r) => {
                                                let type = r.type;
                                                switch (r.type) {
                                                    case 'int':
                                                    case 'double':
                                                    case 'currency':
                                                        type += '(' + 
                                                            helper.html.render.escape(r.precision) + ',' + 
                                                            helper.html.render.escape(r.scale) + 
                                                        ')';
                                                        break;
                                                    case 'reference':
                                                        type += '(' + 
                                                            helper.html.render.escape(r.referenceTo[0]) + 
                                                        ')';
                                                        break;
                                                    default: 
                                                        // Type stays as it is.
                                                }
                                                if (r.calculated) {
                                                    type = 'Formula ('+ type + ')';
                                                }
                                                return type;
                                            }},
                                            { name: '{!JSENCODE($Label.OrgCheck_Length_CL)}', type: 'numeric', property: 'length' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Unique_CL)}', property: 'unique', type: 'checkbox' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Encrypted_CL)}', property: 'encrypted', type: 'checkbox' },
                                            { name: '{!JSENCODE($Label.OrgCheck_ExternalId_CL)}', property: 'externalId', type: 'checkbox' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Default_CL)}', property: 'defaultValue' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Formula_CL)}', property: 'calculatedFormula' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Description_CL)}',
                                                formula: (r) => {
                                                    if (r.description) return helper.html.render.escape(helper.html.render.shrinkText(r.description, 50));
                                                    return '{!JSENCODE($Label.OrgCheck_SetADescription_CL)}';
                                                },
                                                scoreFormula: (r) => { 
                                                    if (!r.description) return 1; 
                                                }
                                            }
                                        ],
                                        data: object.fields,
                                        sorting: { name: '{!JSENCODE($Label.OrgCheck_Label_CL)}', order: 'asc' },
                                        showSearch: false,
                                        showStatistics: false,
                                        showLineCount: true
                                    });
                                }
                                        
                                // -------------------------
                                // RELATIONSHIP FIELDS INFO
                                // -------------------------
                                if (object.childRelationships && object.childRelationships.length > 0) {
                                    helper.html.element.show('section-relationships', true);
                                    helper.html.datatable.create({
                                        element: 'datatable-relationships',
                                        columns: [
                                            { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', property: 'relationshipName' },
                                            { name: '{!JSENCODE($Label.OrgCheck_ChildObject_CL)}', property: 'childSObject' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Field_CL)}', property: 'field' },
                                            { name: '{!JSENCODE($Label.OrgCheck_CascadeDelete_CL)}', property: 'cascadeDelete', type: 'checkbox' }
                                        ],
                                        data: object.childRelationships,
                                        sorting: { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', order: 'asc' },
                                        showSearch: false,
                                        showStatistics: false,
                                        showLineCount: true
                                    });
                                }

                                // -------------------------
                                // RT INFORMATION
                                // -------------------------
                                if (object.recordTypeInfos && object.recordTypeInfos.length > 0) {
                                    helper.html.element.show('section-recordtypes', true);
                                    helper.html.datatable.create({
                                        element: 'datatable-recordtypes',
                                        columns: [
                                            { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', property: 'name' },
                                            { name: '{!JSENCODE($Label.OrgCheck_DeveloperName_CL)}', property: 'developerName' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Master_CL)}', property: 'master' },
                                            { name: 'Record Type Id', property: 'recordTypeId' },
                                            { name: '{!JSENCODE($Label.OrgCheck_IsActive_CL)}', property: 'active', type: 'checkbox' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Available_CL)}', property: 'available', type: 'checkbox' },
                                            { name: '{!JSENCODE($Label.OrgCheck_DefaultMapping_CL)}', property: 'defaultRecordTypeMapping' }
                                        ],
                                        data: object.recordTypeInfos,
                                        sorting: { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', order: 'asc' },
                                        showSearch: false,
                                        showStatistics: false,
                                        showLineCount: true
                                    });
                                }
                                
                                // -------------------------
                                // APEX TRIGGERS INFORMATION
                                // -------------------------
                                if (object.apexTriggers && object.apexTriggers.length > 0) {
                                    helper.html.element.show('section-apexTriggers', true);
                                    helper.html.datatable.create({
                                        element: 'datatable-apexTriggers',
                                        columns: [
                                            { name: 'Id', property: 'id' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', property: 'name' }
                                        ],
                                        data: object.apexTriggers,
                                        sorting: { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', order: 'asc' },
                                        showSearch: false,
                                        showStatistics: false,
                                        showLineCount: true
                                    });
                                }

                                // -------------------------
                                // FIELD SETS INFORMATION
                                // -------------------------
                                if (object.fieldSets && object.fieldSets.length > 0) {
                                    helper.html.element.show('section-fieldSets', true);
                                    helper.html.datatable.create({
                                        element: 'datatable-fieldSets',
                                        columns: [
                                            { name: 'Id', property: 'id' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Label_CL)}', property: 'label' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Description_CL)}', property: 'description' }
                                        ],
                                        data: object.fieldSets,
                                        sorting: { name: '{!JSENCODE($Label.OrgCheck_Label_CL)}', order: 'asc' },
                                        showSearch: false,
                                        showStatistics: false,
                                        showLineCount: true
                                    });
                                }

                                // -------------------------
                                // LAYOUTS INFORMATION
                                // -------------------------
                                if (object.layouts && object.layouts.length > 0) {
                                    helper.html.element.show('section-layouts', true);
                                    helper.html.datatable.create({
                                        element: 'datatable-layouts',
                                        columns: [
                                            { name: 'Id', property: 'id' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', property: 'name' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Type_CL)}', property: 'type' }
                                        ],
                                        data: object.layouts,
                                        sorting: { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', order: 'asc' },
                                        showSearch: false,
                                        showStatistics: false,
                                        showLineCount: true
                                    });
                                }

                                // -------------------------
                                // LIMITS INFORMATION
                                // -------------------------
                                if (object.limits && object.limits.length > 0) {
                                    helper.html.element.show('section-limits', true);
                                    helper.html.datatable.create({
                                        element: 'datatable-limits',
                                        columns: [
                                            { name: 'Id', property: 'id' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Label_CL)}', property: 'label' },
                                            { name: '{!JSENCODE($Label.OrgCheck_PercentageUsed_CL)}', type: 'numeric', formula: (r) => { 
                                                const percentageUsed = (r.max - r.remaining) / r.max;
                                                const imgFlag = percentageUsed >= 0.75 ? 'redFlag' : 'greenFlag';
                                                return helper.html.render.icon(imgFlag) + ' ' + helper.html.render.percentage(percentageUsed);
                                            }},
                                            { name: '{!JSENCODE($Label.OrgCheck_Used_CL)}', type: 'numeric', formula: (r) => { 
                                                return r.max - r.remaining; 
                                            }},
                                            { name: '{!JSENCODE($Label.OrgCheck_Maximum_CL)}', type: 'numeric', property: 'max' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Remaining_CL)}', type: 'numeric', property: 'remaining' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Type_CL)}', property: 'type' }
                                        ],
                                        data: object.limits,
                                        sorting: { name: '{!JSENCODE($Label.OrgCheck_Label_CL)}', order: 'asc' },
                                        showSearch: false,
                                        showStatistics: false
                                    });
                                }

                                // -------------------------
                                // VALIDATION RULES INFORMATION
                                // -------------------------
                                if (object.validationRules && object.validationRules.length > 0) {
                                    helper.html.element.show('section-validationRules', true);
                                    helper.html.datatable.create({
                                        element: 'datatable-validationRules',
                                        columns: [
                                            { name: 'Id', property: 'id' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', property: 'name' },
                                            { name: '{!JSENCODE($Label.OrgCheck_IsActive_CL)}', property: 'isActive' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Field_CL)}', property: 'errorDisplayField' },
                                            { name: '{!JSENCODE($Label.OrgCheck_ErrorMessage_CL)}', property: 'errorMessage' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Description_CL)}', property: 'description' }
                                        ],
                                        data: object.validationRules,
                                        sorting: { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', order: 'asc' },
                                        showSearch: false,
                                        showStatistics: false,
                                        showLineCount: true
                                    });
                                }

                                // -------------------------
                                // WEBLINKS INFORMATION
                                // -------------------------
                                if (object.webLinks && object.webLinks.length > 0) {
                                    helper.html.element.show('section-webLinks', true);
                                    helper.html.datatable.create({
                                        element: 'datatable-webLinks',
                                        columns: [
                                            { name: 'Id', property: 'id' },
                                            { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', property: 'name' }
                                        ],
                                        data: object.webLinks,
                                        sorting: { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', order: 'asc' },
                                        showSearch: false,
                                        showStatistics: false,
                                        showLineCount: true
                                    });
                                }

                                helper.html.progress.hide();
                            }, 
                            function(error) { 
                                helper.html.progress.hide();
                                helper.error.show(error); 
                            }
                        );
                    }

                    // =================================
                    // Init the drop down to select the package
                    // =================================
                    controller.run({
                        datasets: [ 'packages', 'objects', 'orgWideDefaults' ],
                        onRecords: function(map) { 

                            // Get an index of the map using the specific compare function
                            const indexesPackages = helper.map.index(map.packages, function compare(a, b) {
                                if (a.name < b.name) return -1;
                                if (a.name > b.name) return 1;
                                return 0;
                            });

                            // Render the data in a table
                            const selectPck = helper.html.element.get('object-namespace');
                            helper.map.iterate(map.packages, indexesPackages, function(d, i, s) {
                                helper.html.picklist.addValue(selectPck, d.namespace, d.name + ' (api=' + d.namespace + ', type=' + d.type + ')');
                            });

                            // Store all objects
                            allObjects = map.objects;

                            // Select "NO PACKAGE" by default
                            helper.html.element.get('object-namespace').selectedIndex = 1; // No Package
                            onChangePackage('NO_PACKAGE');

                            helper.html.datatable.create({
                                element: 'datatable-orgWideDefaults',
                                columns: [
                                    { name: '{!JSENCODE($Label.OrgCheck_Label_CL)}', property: 'label' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Name_CL)}', property: 'name' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Package_CL)}', property: 'package' },
                                    { name: '{!JSENCODE($Label.OrgCheck_Internal_CL)}', property: 'internal' },
                                    { name: '{!JSENCODE($Label.OrgCheck_External_CL)}', property: 'external' }
                                ],
                                data: map.orgWideDefaults,
                                sorting: { name: '{!JSENCODE($Label.OrgCheck_Object_CL)}', order: 'asc' },
                                showSearch: false,
                                showStatistics: false,
                                showLineCount: true
                            });
                        },
                        actions: {  
                            exportTable: [{
                                visibleTab: 'tab-default-owd__item',
                                table: 'datatable-orgWideDefaults',
                                filename: 'Org Wide Defaults'
                            }, {
                                visibleTab: 'tab-default-objectdoc__item',
                                tables: [
                                    'datatable-general', 'datatable-apexTriggers', 
                                    'datatable-fieldSets', 'datatable-layouts',
                                    'datatable-limits', 'datatable-validationRules', 
                                    'datatable-webLinks', 'datatable-fields', 
                                    'datatable-recordtypes', 'datatable-relationships'
                                ],
                                filename: 'Object Documentation'
                            }],
                            clearCache: { 
                                show: true 
                            }
                        }
                    });

                    // =================================
                    // When changing the package option
                    // =================================
                    const onChangePackage = function(package_name) {
                        
                        // Get the reference of the select form
                        const type_name = helper.html.element.get('object-type').value;

                        initPage();
                        initDropDown(package_name, type_name);
                    }

                    // =================================
                    // When changing the type option
                    // =================================
                    const onChangeType = function(type_name) {

                        // Get the reference of the select form
                        let package_name = helper.html.element.get('object-namespace').value;

                        initPage();
                        initDropDown(package_name, type_name);
                    }

                    // =================================
                    // Define the on change behavior
                    // =================================
                    const onChangeObjectName = function(package_name, object_name) {
                        initPage();
                        if (package_name !== 'EMPTY' && object_name !== 'EMPTY') {
                            if (package_name === 'NO_PACKAGE') {
                                describeObject('', object_name);
                            } else {
                                describeObject(package_name, object_name);
                            }
                        }
                    };

                    // =================================
                    // Bind event to call the change method
                    // =================================
                    helper.html.element.get('object-api-name').onchange = function(event) {
                        onChangeObjectName(helper.html.element.get('object-namespace').value, event.target.value);
                    }
                    helper.html.element.get('object-namespace').onchange = function(event) {
                        onChangePackage(event.target.value);
                    }
                    helper.html.element.get('object-type').onchange = function(event) {
                        onChangeType(event.target.value);
                    }
                    
                    // =================================
                    // By default init the drop down with false
                    // =================================
                    initDropDown();      
                    initPage();
                }
            </script>
        </apex:define>
    </apex:composition>
</apex:page>